{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { TextInput, Keyboard } from 'react-native';\nexport default class KeyboardManager extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"previouslyFocusedTextInput\", undefined);\n    _defineProperty(this, \"startTimestamp\", 0);\n    _defineProperty(this, \"keyboardTimeout\", void 0);\n    _defineProperty(this, \"clearKeyboardTimeout\", () => {\n      if (this.keyboardTimeout !== undefined) {\n        clearTimeout(this.keyboardTimeout);\n        this.keyboardTimeout = undefined;\n      }\n    });\n    _defineProperty(this, \"handlePageChangeStart\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n      this.clearKeyboardTimeout(); // @ts-expect-error: blurTextInput accepts both number and ref, but types say only ref\n\n      const input = TextInput.State.currentlyFocusedInput ? TextInput.State.currentlyFocusedInput() : TextInput.State.currentlyFocusedField(); // When a page change begins, blur the currently focused input\n\n      TextInput.State.blurTextInput(input); // Store the id of this input so we can refocus it if change was cancelled\n\n      this.previouslyFocusedTextInput = input; // Store timestamp for touch start\n\n      this.startTimestamp = Date.now();\n    });\n    _defineProperty(this, \"handlePageChangeConfirm\", force => {\n      if (!this.props.enabled) {\n        return;\n      }\n      this.clearKeyboardTimeout();\n      if (force) {\n        // Always dismiss input, even if we don't have a ref to it\n        // We might not have the ref if onPageChangeStart was never called\n        // This can happen if page change was not from a gesture\n        Keyboard.dismiss();\n      } else {\n        const input = this.previouslyFocusedTextInput;\n        if (input) {\n          // Dismiss the keyboard only if an input was a focused before\n          // This makes sure we don't dismiss input on going back and focusing an input\n          TextInput.State.blurTextInput(input);\n        }\n      } // Cleanup the ID on successful page change\n\n      this.previouslyFocusedTextInput = undefined;\n    });\n    _defineProperty(this, \"handlePageChangeCancel\", () => {\n      if (!this.props.enabled) {\n        return;\n      }\n      this.clearKeyboardTimeout(); // The page didn't change, we should restore the focus of text input\n\n      const input = this.previouslyFocusedTextInput;\n      if (input) {\n        // If the interaction was super short we should make sure keyboard won't hide again.\n        // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n        // During first ~100ms keyboard will be dismissed no matter what,\n        // so we have to make sure it won't interrupt input refocus logic.\n        // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n        // Subtracting timestamps makes us sure the delay is executed only when needed.\n        if (Date.now() - this.startTimestamp < 100) {\n          this.keyboardTimeout = setTimeout(() => {\n            TextInput.State.focusTextInput(input);\n            this.previouslyFocusedTextInput = undefined;\n          }, 100);\n        } else {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = undefined;\n        }\n      }\n    });\n  }\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  } // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAmD,cAAnD;AAaA,eAAe,MAAMC,eAAN,SAA8BH,KAAK,CAACI,SAApC,CAAqD;EAAAC;IAAA;IAAAC,oDAOnBC,SAPmB;IAAAD,wCAQjC,CARiC;IAAAA;IAAAA,8CAWnC,MAAM;MACnC,IAAI,KAAKE,eAAL,KAAyBD,SAA7B,EAAwC;QACtCE,YAAY,CAAC,KAAKD,eAAN,CAAZ;QACA,KAAKA,eAAL,GAAuBD,SAAvB;MACD;IACF,CAhBiE;IAAAD,+CAkBlC,MAAM;MACpC,IAAI,CAAC,KAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;MAED,KAAKC,oBAAL,GALoC,CAOpC;;MACA,MAAMC,KAAe,GAAGZ,SAAS,CAACa,KAAV,CAAgBC,qBAAhB,GACpBd,SAAS,CAACa,KAAV,CAAgBC,qBAAhB,EADoB,GAEpBd,SAAS,CAACa,KAAV,CAAgBE,qBAAhB,EAFJ,CARoC,CAYpC;;MACAf,SAAS,CAACa,KAAV,CAAgBG,aAAhB,CAA8BJ,KAA9B,EAboC,CAepC;;MACA,KAAKK,0BAAL,GAAkCL,KAAlC,CAhBoC,CAkBpC;;MACA,KAAKM,cAAL,GAAsBC,IAAI,CAACC,GAAL,EAAtB;IACD,CAtCiE;IAAAf,iDAwC/BgB,KAAD,IAAoB;MACpD,IAAI,CAAC,KAAKZ,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;MAED,KAAKC,oBAAL;MAEA,IAAIU,KAAJ,EAAW;QACT;QACA;QACA;QACApB,QAAQ,CAACqB,OAAT;MACD,CALD,MAKO;QACL,MAAMV,KAAK,GAAG,KAAKK,0BAAnB;QAEA,IAAIL,KAAJ,EAAW;UACT;UACA;UACAZ,SAAS,CAACa,KAAV,CAAgBG,aAAhB,CAA8BJ,KAA9B;QACD;MACF,CApBmD,CAsBpD;;MACA,KAAKK,0BAAL,GAAkCX,SAAlC;IACD,CAhEiE;IAAAD,gDAkEjC,MAAM;MACrC,IAAI,CAAC,KAAKI,KAAL,CAAWC,OAAhB,EAAyB;QACvB;MACD;MAED,KAAKC,oBAAL,GALqC,CAOrC;;MACA,MAAMC,KAAK,GAAG,KAAKK,0BAAnB;MAEA,IAAIL,KAAJ,EAAW;QACT;QAEA;QACA;QACA;QACA;QACA;QACA,IAAIO,IAAI,CAACC,GAAL,KAAa,KAAKF,cAAlB,GAAmC,GAAvC,EAA4C;UAC1C,KAAKX,eAAL,GAAuBgB,UAAU,CAAC,MAAM;YACtCvB,SAAS,CAACa,KAAV,CAAgBW,cAAhB,CAA+BZ,KAA/B;YACA,KAAKK,0BAAL,GAAkCX,SAAlC;UACD,CAHgC,EAG9B,GAH8B,CAAjC;QAID,CALD,MAKO;UACLN,SAAS,CAACa,KAAV,CAAgBW,cAAhB,CAA+BZ,KAA/B;UACA,KAAKK,0BAAL,GAAkCX,SAAlC;QACD;MACF;IACF,CA9FiE;EAAA;EAClEmB,oBAAoB,GAAG;IACrB,KAAKd,oBAAL;EACD,CAHiE,CAKlE;EACA;;EA0FAe,MAAM,GAAG;IACP,OAAO,KAAKjB,KAAL,CAAWkB,QAAX,CAAoB;MACzBC,iBAAiB,EAAE,KAAKC,qBADC;MAEzBC,mBAAmB,EAAE,KAAKC,uBAFD;MAGzBC,kBAAkB,EAAE,KAAKC;IAHA,CAApB,CAAP;EAKD;AAtGiE","names":["React","TextInput","Keyboard","KeyboardManager","Component","constructor","_defineProperty","undefined","keyboardTimeout","clearTimeout","props","enabled","clearKeyboardTimeout","input","State","currentlyFocusedInput","currentlyFocusedField","blurTextInput","previouslyFocusedTextInput","startTimestamp","Date","now","force","dismiss","setTimeout","focusTextInput","componentWillUnmount","render","children","onPageChangeStart","handlePageChangeStart","onPageChangeConfirm","handlePageChangeConfirm","onPageChangeCancel","handlePageChangeCancel"],"sources":["KeyboardManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TextInput, Keyboard, HostComponent } from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  children: (props: {\n    onPageChangeStart: () => void;\n    onPageChangeConfirm: (force: boolean) => void;\n    onPageChangeCancel: () => void;\n  }) => React.ReactNode;\n};\n\ntype InputRef = React.ElementRef<HostComponent<unknown>> | undefined;\n\nexport default class KeyboardManager extends React.Component<Props> {\n  componentWillUnmount() {\n    this.clearKeyboardTimeout();\n  }\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: InputRef = undefined;\n  private startTimestamp: number = 0;\n  private keyboardTimeout: any;\n\n  private clearKeyboardTimeout = () => {\n    if (this.keyboardTimeout !== undefined) {\n      clearTimeout(this.keyboardTimeout);\n      this.keyboardTimeout = undefined;\n    }\n  };\n\n  private handlePageChangeStart = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // @ts-expect-error: blurTextInput accepts both number and ref, but types say only ref\n    const input: InputRef = TextInput.State.currentlyFocusedInput\n      ? TextInput.State.currentlyFocusedInput()\n      : TextInput.State.currentlyFocusedField();\n\n    // When a page change begins, blur the currently focused input\n    TextInput.State.blurTextInput(input);\n\n    // Store the id of this input so we can refocus it if change was cancelled\n    this.previouslyFocusedTextInput = input;\n\n    // Store timestamp for touch start\n    this.startTimestamp = Date.now();\n  };\n\n  private handlePageChangeConfirm = (force: boolean) => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    if (force) {\n      // Always dismiss input, even if we don't have a ref to it\n      // We might not have the ref if onPageChangeStart was never called\n      // This can happen if page change was not from a gesture\n      Keyboard.dismiss();\n    } else {\n      const input = this.previouslyFocusedTextInput;\n\n      if (input) {\n        // Dismiss the keyboard only if an input was a focused before\n        // This makes sure we don't dismiss input on going back and focusing an input\n        TextInput.State.blurTextInput(input);\n      }\n    }\n\n    // Cleanup the ID on successful page change\n    this.previouslyFocusedTextInput = undefined;\n  };\n\n  private handlePageChangeCancel = () => {\n    if (!this.props.enabled) {\n      return;\n    }\n\n    this.clearKeyboardTimeout();\n\n    // The page didn't change, we should restore the focus of text input\n    const input = this.previouslyFocusedTextInput;\n\n    if (input) {\n      // If the interaction was super short we should make sure keyboard won't hide again.\n\n      // Too fast input refocus will result only in keyboard flashing on screen and hiding right away.\n      // During first ~100ms keyboard will be dismissed no matter what,\n      // so we have to make sure it won't interrupt input refocus logic.\n      // That's why when the interaction is shorter than 100ms we add delay so it won't hide once again.\n      // Subtracting timestamps makes us sure the delay is executed only when needed.\n      if (Date.now() - this.startTimestamp < 100) {\n        this.keyboardTimeout = setTimeout(() => {\n          TextInput.State.focusTextInput(input);\n          this.previouslyFocusedTextInput = undefined;\n        }, 100);\n      } else {\n        TextInput.State.focusTextInput(input);\n        this.previouslyFocusedTextInput = undefined;\n      }\n    }\n  };\n\n  render() {\n    return this.props.children({\n      onPageChangeStart: this.handlePageChangeStart,\n      onPageChangeConfirm: this.handlePageChangeConfirm,\n      onPageChangeCancel: this.handlePageChangeCancel,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}