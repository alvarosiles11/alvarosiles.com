{"ast":null,"code":"import * as React from 'react';\nimport { NavigationHelpersContext, getPathFromState } from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\nconst getRootStateForNavigate = (navigation, state) => {\n  const parent = navigation.getParent();\n  if (parent) {\n    const parentState = parent.getState();\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [{\n        ...parentState.routes[parentState.index],\n        state: state\n      }]\n    });\n  }\n  return state;\n};\n/**\r\n * Build destination link for a navigate action.\r\n * Useful for showing anchor tags on the web for buttons that perform navigation.\r\n */\n\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n  const buildLink = React.useCallback((name, params) => {\n    const {\n      options\n    } = linking;\n    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {\n      return undefined;\n    }\n    const state = navigation ? getRootStateForNavigate(navigation, {\n      index: 0,\n      routes: [{\n        name,\n        params\n      }]\n    }) :\n    // If we couldn't find a navigation object in context, we're at root\n    // So we'll construct a basic state object to use\n    {\n      index: 0,\n      routes: [{\n        name,\n        params\n      }]\n    };\n    const path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);\n    return path;\n  }, [linking, navigation]);\n  return buildLink;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAEEC,wBAFF,EAKEC,gBALF,QAMO,wBANP;AAOA,OAAOC,cAAP,MAA2B,kBAA3B;AAWA,MAAMC,uBAAuB,GAAG,CAC9BC,UAD8B,EAE9BC,KAF8B,KAGb;EACjB,MAAMC,MAAM,GAAGF,UAAU,CAACG,SAAX,EAAf;EAEA,IAAID,MAAJ,EAAY;IACV,MAAME,WAAW,GAAGF,MAAM,CAACG,QAAP,EAApB;IAEA,OAAON,uBAAuB,CAACG,MAAD,EAAS;MACrCI,KAAK,EAAE,CAD8B;MAErCC,MAAM,EAAE,CACN;QACE,GAAGH,WAAW,CAACG,MAAZ,CAAmBH,WAAW,CAACE,KAA/B,CADL;QAEEL,KAAK,EAAEA;MAFT,CADM;IAF6B,CAAT,CAA9B;EASD;EAED,OAAOA,KAAP;AACD,CArBD;AAuBA;AACA;AACA;AACA;;AACA,eAAe,SAASO,cAAT,GAA0B;EACvC,MAAMR,UAAU,GAAGL,KAAK,CAACc,UAAN,CAAiBb,wBAAjB,CAAnB;EACA,MAAMc,OAAO,GAAGf,KAAK,CAACc,UAAN,CAAiBX,cAAjB,CAAhB;EAEA,MAAMa,SAAS,GAAGhB,KAAK,CAACiB,WAAN,CAChB,CAACC,IAAD,EAAeC,MAAf,KAAmC;IACjC,MAAM;MAAEC;IAAF,IAAcL,OAApB;IAEA,IAAI,QAAO,SAAP,WAAO,WAAP,mBAAO,CAAEM,OAAT,MAAqB,KAAzB,EAAgC;MAC9B,OAAOC,SAAP;IACD;IAED,MAAMhB,KAAK,GAAGD,UAAU,GACpBD,uBAAuB,CAACC,UAAD,EAAa;MAClCM,KAAK,EAAE,CAD2B;MAElCC,MAAM,EAAE,CAAC;QAAEM,IAAF;QAAQC;MAAR,CAAD;IAF0B,CAAb,CADH;IAKpB;IACA;IACA;MACER,KAAK,EAAE,CADT;MAEEC,MAAM,EAAE,CAAC;QAAEM,IAAF;QAAQC;MAAR,CAAD;IAFV,CAPJ;IAYA,MAAMI,IAAI,GAAGH,OAAO,SAAP,WAAO,WAAP,WAAO,CAAElB,gBAAT,GACTkB,OAAO,CAAClB,gBAAR,CAAyBI,KAAzB,EAAgCc,OAAhC,aAAgCA,OAAhC,uBAAgCA,OAAO,CAAEI,MAAzC,CADS,GAETtB,gBAAgB,CAACI,KAAD,EAAQc,OAAR,aAAQA,OAAR,uBAAQA,OAAO,CAAEI,MAAjB,CAFpB;IAIA,OAAOD,IAAP;EACD,CAzBe,EA0BhB,CAACR,OAAD,EAAUV,UAAV,CA1BgB,CAAlB;EA6BA,OAAOW,SAAP;AACD","names":["React","NavigationHelpersContext","getPathFromState","LinkingContext","getRootStateForNavigate","navigation","state","parent","getParent","parentState","getState","index","routes","useLinkBuilder","useContext","linking","buildLink","useCallback","name","params","options","enabled","undefined","path","config"],"sources":["useLinkBuilder.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n  getPathFromState,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n"]},"metadata":{},"sourceType":"module"}