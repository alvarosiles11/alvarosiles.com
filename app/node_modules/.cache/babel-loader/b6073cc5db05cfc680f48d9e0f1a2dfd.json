{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nfunction StackNavigator(_ref) {\n  let {\n    initialRouteName,\n    children,\n    screenOptions,\n    ...rest\n  } = _ref;\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'\n  };\n  const {\n    state,\n    descriptors,\n    navigation\n  } = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions: typeof screenOptions === 'function' ? function () {\n      return {\n        ...defaultOptions,\n        ...screenOptions(...arguments)\n      };\n    } : {\n      ...defaultOptions,\n      ...screenOptions\n    }\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n      const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          // When user taps on already focused tab and we're inside the tab,\n          // reset the stack to replicate native behaviour\n          navigation.dispatch({\n            ...StackActions.popToTop(),\n            target: state.key\n          });\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SACEC,oBADF,EAEEC,sBAFF,EAKEC,WALF,EAQEC,YARF,QAWO,0BAXP;AAYA,OAAOC,SAAP,MAAsB,0BAAtB;AAWA,SAASC,cAAT,OAKU;EAAA,IALc;IACtBC,gBADsB;IAEtBC,QAFsB;IAGtBC,aAHsB;IAItB,GAAGC;EAJmB,CAAxB;EAME,MAAMC,cAAc,GAAG;IACrBC,cAAc,EAAEZ,QAAQ,CAACa,EAAT,KAAgB,KADX;IAErBC,gBAAgB,EACdd,QAAQ,CAACa,EAAT,KAAgB,KAAhB,IACAb,QAAQ,CAACa,EAAT,KAAgB,SADhB,IAEAb,QAAQ,CAACa,EAAT,KAAgB;EALG,CAAvB;EAQA,MAAM;IAAEE,KAAF;IAASC,WAAT;IAAsBC;EAAtB,IAAqChB,oBAAoB,CAM7DE,WAN6D,EAMhD;IACbI,gBADa;IAEbC,QAFa;IAGbC,aAAa,EACX,OAAOA,aAAP,KAAyB,UAAzB,GACI;MAAA,OAAc;QACZ,GAAGE,cADS;QAEZ,GAAGF,aAAa,CAAC,YAAD;MAFJ,CAAd;IAAA,CADJ,GAKI;MACE,GAAGE,cADL;MAEE,GAAGF;IAFL;EATO,CANgD,CAA/D;EAqBAV,KAAK,CAACmB,SAAN,CACE;IAAA;IAAA,gCACED,UAAU,CAACE,WADb,0DACEC,qCAAU,EAAe,UAAf,EAA4BC,CAAD,IAAO;MAC1C,MAAMC,SAAS,GAAGL,UAAU,CAACK,SAAX,EAAlB,CAD0C,CAG1C;MACA;;MACAC,qBAAqB,CAAC,MAAM;QAC1B,IACER,KAAK,CAACS,KAAN,GAAc,CAAd,IACAF,SADA,IAEA,CAAED,CAAD,CAAkCI,gBAHrC,EAIE;UACA;UACA;UACAR,UAAU,CAACS,QAAX,CAAoB;YAClB,GAAGtB,YAAY,CAACuB,QAAb,EADe;YAElBC,MAAM,EAAEb,KAAK,CAACc;UAFI,CAApB;QAID;MACF,CAboB,CAArB;IAcD,CAnBS,CADZ;EAAA,CADF,EAsBE,CAACZ,UAAD,EAAaF,KAAK,CAACS,KAAnB,EAA0BT,KAAK,CAACc,GAAhC,CAtBF;EAyBA,oBACE9B,oBAACM,SAAD,eACMK,IADN;IAEEK,KAAK,EAAEA,KAFT;IAGEC,WAAW,EAAEA,WAHf;IAIEC,UAAU,EAAEA;EAJd,GADF;AAQD;AAED,eAAef,sBAAsB,CAKnCI,cALmC,CAArC","names":["React","Platform","useNavigationBuilder","createNavigatorFactory","StackRouter","StackActions","StackView","StackNavigator","initialRouteName","children","screenOptions","rest","defaultOptions","gestureEnabled","OS","animationEnabled","state","descriptors","navigation","useEffect","addListener","_navigation$addListen","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"sources":["createStackNavigator.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}