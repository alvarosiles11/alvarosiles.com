{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\n/**\r\n * Hook for passing focus callback to children\r\n */\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  let {\n    navigation,\n    focusedListeners\n  } = _ref;\n  const {\n    addListener\n  } = React.useContext(NavigationBuilderContext);\n  const listener = React.useCallback(callback => {\n    if (navigation.isFocused()) {\n      for (const listener of focusedListeners) {\n        const {\n          handled,\n          result\n        } = listener(callback);\n        if (handled) {\n          return {\n            handled,\n            result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(() => addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener), [addListener, listener]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP,MAGO,4BAHP;;AAWA;AACA;AACA;AACA,eAAe,SAASC,kCAAT,OAGH;EAAA,IAH+C;IACzDC,UADyD;IAEzDC;EAFyD,CAA5C;EAIb,MAAM;IAAEC;EAAF,IAAkBL,KAAK,CAACM,UAAN,CAAiBL,wBAAjB,CAAxB;EAEA,MAAMM,QAAQ,GAAGP,KAAK,CAACQ,WAAN,CACdC,QAAD,IAA8C;IAC5C,IAAIN,UAAU,CAACO,SAAX,EAAJ,EAA4B;MAC1B,KAAK,MAAMH,QAAX,IAAuBH,gBAAvB,EAAyC;QACvC,MAAM;UAAEO,OAAF;UAAWC;QAAX,IAAsBL,QAAQ,CAACE,QAAD,CAApC;QAEA,IAAIE,OAAJ,EAAa;UACX,OAAO;YAAEA,OAAF;YAAWC;UAAX,CAAP;QACD;MACF;MAED,OAAO;QAAED,OAAO,EAAE,IAAX;QAAiBC,MAAM,EAAEH,QAAQ,CAACN,UAAD;MAAjC,CAAP;IACD,CAVD,MAUO;MACL,OAAO;QAAEQ,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE;MAA1B,CAAP;IACD;EACF,CAfc,EAgBf,CAACR,gBAAD,EAAmBD,UAAnB,CAhBe,CAAjB;EAmBAH,KAAK,CAACa,SAAN,CAAgB,MAAMR,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAG,OAAH,EAAYE,QAAZ,CAAjC,EAAwD,CACtDF,WADsD,EAEtDE,QAFsD,CAAxD;AAID","names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","addListener","useContext","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}