{"ast":null,"code":"import * as React from 'react';\nimport { Text, Platform } from 'react-native';\nimport useLinkProps from './useLinkProps';\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link(_ref) {\n  let {\n    to,\n    action,\n    ...rest\n  } = _ref;\n  const props = useLinkProps({\n    to,\n    action\n  });\n  const onPress = e => {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n    props.onPress(e);\n  };\n  return /*#__PURE__*/React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: {\n        onClick: onPress\n      },\n      default: {\n        onPress\n      }\n    })\n  });\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAiDC,QAAjD,QAAiE,cAAjE;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,IAAT,OAA8C;EAAA,IAAhC;IAAEC,EAAF;IAAMC,MAAN;IAAc,GAAGC;EAAjB,CAAd;EACb,MAAMC,KAAK,GAAGL,YAAY,CAAC;IAAEE,EAAF;IAAMC;EAAN,CAAD,CAA1B;EAEA,MAAMG,OAAO,GACXC,CADc,IAEX;IACH,IAAI,aAAaH,IAAjB,EAAuB;MAAA;MACrB,qBAAI,CAACE,OAAL,yEAAI,EAAWC,CAAX,CAAJ;IACD;IAEDF,KAAK,CAACC,OAAN,CAAcC,CAAd;EACD,CARD;EAUA,oBAAOV,KAAK,CAACW,aAAN,CAAoBV,IAApB,EAA0B;IAC/B,GAAGO,KAD4B;IAE/B,GAAGD,IAF4B;IAG/B,GAAGL,QAAQ,CAACU,MAAT,CAAgB;MACjBC,GAAG,EAAE;QAAEC,OAAO,EAAEL;MAAX,CADY;MAEjBM,OAAO,EAAE;QAAEN;MAAF;IAFQ,CAAhB;EAH4B,CAA1B,CAAP;AAQD","names":["React","Text","Platform","useLinkProps","Link","to","action","rest","props","onPress","e","createElement","select","web","onClick","default"],"sources":["Link.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}