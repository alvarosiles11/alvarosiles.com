{"ast":null,"code":"import * as React from 'react';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const {\n    current: listeners\n  } = React.useRef({\n    action: [],\n    focus: []\n  });\n  const addListener = React.useCallback((type, listener) => {\n    // @ts-expect-error: listener should be correct type according to `type`\n    listeners[type].push(listener);\n    return () => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      const index = listeners[type].indexOf(listener);\n      listeners[type].splice(index, 1);\n    };\n  }, [listeners]);\n  return {\n    listeners,\n    addListener\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA;AACA;AACA;AACA,eAAe,SAASC,iBAAT,GAA6B;EAC1C,MAAM;IAAEC,OAAO,EAAEC;EAAX,IAAyBH,KAAK,CAACI,MAAN,CAI7B;IACAC,MAAM,EAAE,EADR;IAEAC,KAAK,EAAE;EAFP,CAJ6B,CAA/B;EASA,MAAMC,WAAW,GAAGP,KAAK,CAACQ,WAAN,CAClB,CAA8BC,IAA9B,EAAuCC,QAAvC,KAAoE;IAClE;IACAP,SAAS,CAACM,IAAD,CAAT,CAAgBE,IAAhB,CAAqBD,QAArB;IAEA,OAAO,MAAM;MACX;MACA,MAAME,KAAK,GAAGT,SAAS,CAACM,IAAD,CAAT,CAAgBI,OAAhB,CAAwBH,QAAxB,CAAd;MAEAP,SAAS,CAACM,IAAD,CAAT,CAAgBK,MAAhB,CAAuBF,KAAvB,EAA8B,CAA9B;IACD,CALD;EAMD,CAXiB,EAYlB,CAACT,SAAD,CAZkB,CAApB;EAeA,OAAO;IACLA,SADK;IAELI;EAFK,CAAP;AAID","names":["React","useChildListeners","current","listeners","useRef","action","focus","addListener","useCallback","type","listener","push","index","indexOf","splice"],"sources":["useChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<\n    {\n      [K in keyof ListenerMap]: ListenerMap[K][];\n    }\n  >({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      listeners[type].push(listener);\n\n      return () => {\n        // @ts-expect-error: listener should be correct type according to `type`\n        const index = listeners[type].indexOf(listener);\n\n        listeners[type].splice(index, 1);\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}