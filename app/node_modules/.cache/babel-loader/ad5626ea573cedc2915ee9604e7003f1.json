{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\n'use strict';\n\nimport InteractionManager from '../../../exports/InteractionManager';\n/**\r\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\r\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\r\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\r\n * interactions are done running.\r\n *\r\n * Make sure to cleanup with dispose().  Example:\r\n *\r\n *   class Widget extends React.Component {\r\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\r\n *     _saveSate() {\r\n *       // save this.state to disk\r\n *     }\r\n *     componentDidUpdate() {\r\n *       this._batchedSave.schedule();\r\n *     }\r\n *     componentWillUnmount() {\r\n *       this._batchedSave.dispose();\r\n *     }\r\n *     ...\r\n *   }\r\n */\n\nvar Batchinator = /*#__PURE__*/function () {\n  function Batchinator(callback, delayMS) {\n    this._delay = delayMS;\n    this._callback = callback;\n  }\n  /*\r\n   * Cleanup any pending tasks.\r\n   *\r\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\r\n   * true to not call the callback if it was pending.\r\n   */\n\n  var _proto = Batchinator.prototype;\n  _proto.dispose = function dispose(options) {\n    if (options === void 0) {\n      options = {\n        abort: false\n      };\n    }\n    if (this._taskHandle) {\n      this._taskHandle.cancel();\n      if (!options.abort) {\n        this._callback();\n      }\n      this._taskHandle = null;\n    }\n  };\n  _proto.schedule = function schedule() {\n    var _this = this;\n    if (this._taskHandle) {\n      return;\n    }\n    var timeoutHandle = setTimeout(function () {\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\n        // Note that we clear the handle before invoking the callback so that if the callback calls\n        // schedule again, it will actually schedule another task.\n        _this._taskHandle = null;\n        _this._callback();\n      });\n    }, this._delay);\n    this._taskHandle = {\n      cancel: function cancel() {\n        return clearTimeout(timeoutHandle);\n      }\n    };\n  };\n  return Batchinator;\n}();\nexport default Batchinator;","map":{"version":3,"names":["InteractionManager","Batchinator","callback","delayMS","_delay","_callback","_proto","prototype","dispose","options","abort","_taskHandle","cancel","schedule","_this","timeoutHandle","setTimeout","runAfterInteractions","clearTimeout"],"sources":["C:/Users/julieta/Documents/GitHub/alvarosiles.com/app/node_modules/react-native-web/dist/vendor/react-native/Batchinator/index.js"],"sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * \r\n */\r\n'use strict';\r\n\r\nimport InteractionManager from '../../../exports/InteractionManager';\r\n/**\r\n * A simple class for batching up invocations of a low-pri callback. A timeout is set to run the\r\n * callback once after a delay, no matter how many times it's scheduled. Once the delay is reached,\r\n * InteractionManager.runAfterInteractions is used to invoke the callback after any hi-pri\r\n * interactions are done running.\r\n *\r\n * Make sure to cleanup with dispose().  Example:\r\n *\r\n *   class Widget extends React.Component {\r\n *     _batchedSave: new Batchinator(() => this._saveState, 1000);\r\n *     _saveSate() {\r\n *       // save this.state to disk\r\n *     }\r\n *     componentDidUpdate() {\r\n *       this._batchedSave.schedule();\r\n *     }\r\n *     componentWillUnmount() {\r\n *       this._batchedSave.dispose();\r\n *     }\r\n *     ...\r\n *   }\r\n */\r\n\r\nvar Batchinator = /*#__PURE__*/function () {\r\n  function Batchinator(callback, delayMS) {\r\n    this._delay = delayMS;\r\n    this._callback = callback;\r\n  }\r\n  /*\r\n   * Cleanup any pending tasks.\r\n   *\r\n   * By default, if there is a pending task the callback is run immediately. Set the option abort to\r\n   * true to not call the callback if it was pending.\r\n   */\r\n\r\n\r\n  var _proto = Batchinator.prototype;\r\n\r\n  _proto.dispose = function dispose(options) {\r\n    if (options === void 0) {\r\n      options = {\r\n        abort: false\r\n      };\r\n    }\r\n\r\n    if (this._taskHandle) {\r\n      this._taskHandle.cancel();\r\n\r\n      if (!options.abort) {\r\n        this._callback();\r\n      }\r\n\r\n      this._taskHandle = null;\r\n    }\r\n  };\r\n\r\n  _proto.schedule = function schedule() {\r\n    var _this = this;\r\n\r\n    if (this._taskHandle) {\r\n      return;\r\n    }\r\n\r\n    var timeoutHandle = setTimeout(function () {\r\n      _this._taskHandle = InteractionManager.runAfterInteractions(function () {\r\n        // Note that we clear the handle before invoking the callback so that if the callback calls\r\n        // schedule again, it will actually schedule another task.\r\n        _this._taskHandle = null;\r\n\r\n        _this._callback();\r\n      });\r\n    }, this._delay);\r\n    this._taskHandle = {\r\n      cancel: function cancel() {\r\n        return clearTimeout(timeoutHandle);\r\n      }\r\n    };\r\n  };\r\n\r\n  return Batchinator;\r\n}();\r\n\r\nexport default Batchinator;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,OAAOA,kBAAkB,MAAM,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GAAG,aAAa,YAAY;EACzC,SAASA,WAAW,CAACC,QAAQ,EAAEC,OAAO,EAAE;IACtC,IAAI,CAACC,MAAM,GAAGD,OAAO;IACrB,IAAI,CAACE,SAAS,GAAGH,QAAQ;EAC3B;EACA;AACF;AACA;AACA;AACA;AACA;;EAGE,IAAII,MAAM,GAAGL,WAAW,CAACM,SAAS;EAElCD,MAAM,CAACE,OAAO,GAAG,SAASA,OAAO,CAACC,OAAO,EAAE;IACzC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MACtBA,OAAO,GAAG;QACRC,KAAK,EAAE;MACT,CAAC;IACH;IAEA,IAAI,IAAI,CAACC,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACC,MAAM,EAAE;MAEzB,IAAI,CAACH,OAAO,CAACC,KAAK,EAAE;QAClB,IAAI,CAACL,SAAS,EAAE;MAClB;MAEA,IAAI,CAACM,WAAW,GAAG,IAAI;IACzB;EACF,CAAC;EAEDL,MAAM,CAACO,QAAQ,GAAG,SAASA,QAAQ,GAAG;IACpC,IAAIC,KAAK,GAAG,IAAI;IAEhB,IAAI,IAAI,CAACH,WAAW,EAAE;MACpB;IACF;IAEA,IAAII,aAAa,GAAGC,UAAU,CAAC,YAAY;MACzCF,KAAK,CAACH,WAAW,GAAGX,kBAAkB,CAACiB,oBAAoB,CAAC,YAAY;QACtE;QACA;QACAH,KAAK,CAACH,WAAW,GAAG,IAAI;QAExBG,KAAK,CAACT,SAAS,EAAE;MACnB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAACD,MAAM,CAAC;IACf,IAAI,CAACO,WAAW,GAAG;MACjBC,MAAM,EAAE,SAASA,MAAM,GAAG;QACxB,OAAOM,YAAY,CAACH,aAAa,CAAC;MACpC;IACF,CAAC;EACH,CAAC;EAED,OAAOd,WAAW;AACpB,CAAC,EAAE;AAEH,eAAeA,WAAW"},"metadata":{},"sourceType":"module"}