{"ast":null,"code":"import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport Header from './Header';\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nexport default function HeaderContainer(_ref) {\n  let {\n    mode,\n    scenes,\n    layout,\n    insets,\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange,\n    gestureDirection,\n    styleInterpolator,\n    style\n  } = _ref;\n  const focusedRoute = getFocusedRoute();\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map((scene, i, self) => {\n    var _getPreviousScene;\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    const {\n      header,\n      headerShown = true,\n      headerTransparent\n    } = scene.descriptor.options || {};\n    if (!headerShown) {\n      return null;\n    }\n    const isFocused = focusedRoute.key === scene.route.key;\n    const previous = (_getPreviousScene = getPreviousScene({\n      route: scene.route\n    })) !== null && _getPreviousScene !== void 0 ? _getPreviousScene : parentPreviousScene; // If the screen is next to a headerless screen, we need to make the header appear static\n    // This makes the header look like it's moving with the screen\n\n    const previousScene = self[i - 1];\n    const nextScene = self[i + 1];\n    const {\n      headerShown: previousHeaderShown = true\n    } = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {};\n    const {\n      headerShown: nextHeaderShown = true\n    } = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {};\n    const isHeaderStatic = previousHeaderShown === false &&\n    // We still need to animate when coming back from next scene\n    // A hacky way to check this is if the next scene exists\n    !nextScene || nextHeaderShown === false;\n    const props = {\n      mode,\n      layout,\n      insets,\n      scene,\n      previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: scene.route\n    }, /*#__PURE__*/React.createElement(View, {\n      onLayout: onContentHeightChange ? e => {\n        const {\n          height\n        } = e.nativeEvent.layout;\n        onContentHeightChange({\n          route: scene.route,\n          height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style:\n      // Avoid positioning the focused header absolutely\n      // Otherwise accessibility tools don't seem to be able to find it\n      mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : /*#__PURE__*/React.createElement(Header, props))));\n  }));\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","NavigationContext","NavigationRouteContext","Header","forSlideLeft","forSlideUp","forNoAnimation","forSlideRight","PreviousSceneContext","HeaderContainer","mode","scenes","layout","insets","getPreviousScene","getFocusedRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","parentPreviousScene","useContext","pointerEvents","slice","map","scene","i","self","length","header","headerShown","headerTransparent","descriptor","options","isFocused","key","route","previous","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","navigation","Provider","value","onLayout","e","height","nativeEvent","undefined","accessibilityElementsHidden","importantForAccessibility","styles","create","position","top","left","right"],"sources":["HeaderContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { header, headerShown = true, headerTransparent } =\n          scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previous =\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const { headerShown: previousHeaderShown = true } =\n          previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = true } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}