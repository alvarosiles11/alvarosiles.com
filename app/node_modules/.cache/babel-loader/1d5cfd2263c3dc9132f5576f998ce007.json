{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useTheme } from '@react-navigation/native';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nconst EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  let {\n    active,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    closing,\n    gesture,\n    focused,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    getPreviousScene,\n    getFocusedRoute,\n    mode,\n    headerMode,\n    headerShown,\n    headerStyleInterpolator,\n    hasAbsoluteHeader,\n    headerHeight,\n    onHeaderHeightChange,\n    isParentHeaderShown,\n    index,\n    layout,\n    onCloseRoute,\n    onOpenRoute,\n    onPageChangeCancel,\n    onPageChangeConfirm,\n    onPageChangeStart,\n    onGestureCancel,\n    onGestureEnd,\n    onGestureStart,\n    onTransitionEnd,\n    onTransitionStart,\n    renderHeader,\n    renderScene,\n    safeAreaInsetBottom,\n    safeAreaInsetLeft,\n    safeAreaInsetRight,\n    safeAreaInsetTop,\n    scene,\n    transitionSpec\n  } = _ref;\n  const handleOpen = () => {\n    const {\n      route\n    } = scene;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route\n    }, false);\n    onOpenRoute({\n      route\n    });\n  };\n  const handleClose = () => {\n    const {\n      route\n    } = scene;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route\n    }, true);\n    onCloseRoute({\n      route\n    });\n  };\n  const handleGestureBegin = () => {\n    const {\n      route\n    } = scene;\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route\n    });\n  };\n  const handleGestureCanceled = () => {\n    const {\n      route\n    } = scene;\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route\n    });\n  };\n  const handleGestureEnd = () => {\n    const {\n      route\n    } = scene;\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route\n    });\n  };\n  const handleTransition = _ref2 => {\n    let {\n      closing,\n      gesture\n    } = _ref2;\n    const {\n      route\n    } = scene;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route\n    }, closing);\n  };\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  const [pointerEvents, setPointerEvents] = React.useState('box-none');\n  React.useEffect(() => {\n    var _scene$progress$next, _scene$progress$next$;\n\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, _ref3 => {\n      let {\n        value\n      } = _ref3;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return () => {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return /*#__PURE__*/React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: [{\n      // This is necessary to avoid unfocused larger pages increasing scroll area\n      // The issue can be seen on the web when a smaller screen is pushed over a larger one\n      overflow: active ? undefined : 'hidden'\n    }, StyleSheet.absoluteFill]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.container\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.scene\n  }, /*#__PURE__*/React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, /*#__PURE__*/React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, /*#__PURE__*/React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout,\n    insets,\n    scenes: [previousScene, scene],\n    getPreviousScene,\n    getFocusedRoute,\n    gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\nexport default /*#__PURE__*/React.memo(CardContainer);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","StyleSheet","useTheme","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","isCurrentHeaderShown","previousScene","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onTransition","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","overflow","undefined","absoluteFill","styles","container","Provider","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}