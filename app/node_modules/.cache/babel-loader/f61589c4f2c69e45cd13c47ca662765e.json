{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = flexboxIE;\nvar alternativeValues = {\n  'space-around': 'distribute',\n  'space-between': 'justify',\n  'flex-start': 'start',\n  'flex-end': 'end'\n};\nvar alternativeProps = {\n  alignContent: 'msFlexLinePack',\n  alignSelf: 'msFlexItemAlign',\n  alignItems: 'msFlexAlign',\n  justifyContent: 'msFlexPack',\n  order: 'msFlexOrder',\n  flexGrow: 'msFlexPositive',\n  flexShrink: 'msFlexNegative',\n  flexBasis: 'msFlexPreferredSize'\n\n  // Full expanded syntax is flex-grow | flex-shrink | flex-basis.\n};\nvar flexShorthandMappings = {\n  auto: '1 1 auto',\n  inherit: 'inherit',\n  initial: '0 1 auto',\n  none: '0 0 auto',\n  unset: 'unset'\n};\nvar isUnitlessNumber = /^\\d+(\\.\\d+)?$/;\nvar logTag = 'inline-style-prefixer.flexboxIE plugin';\nfunction flexboxIE(property, value, style) {\n  if (alternativeProps.hasOwnProperty(property)) {\n    style[alternativeProps[property]] = alternativeValues[value] || value;\n  }\n  if (property === 'flex') {\n    // For certain values we can do straight mappings based on the spec\n    // for the expansions.\n    if (Object.prototype.hasOwnProperty.call(flexShorthandMappings, value)) {\n      style.msFlex = flexShorthandMappings[value];\n      return;\n    }\n    // Here we have no direct mapping, so we favor looking for a\n    // unitless positive number as that will be the most common use-case.\n    if (isUnitlessNumber.test(value)) {\n      style.msFlex = value + ' 1 0%';\n      return;\n    }\n    if (typeof value === 'number' && value < 0) {\n      // ignore negative values;\n      console.warn(logTag + ': \"flex: ' + value + '\", negative values are not valid and will be ignored.');\n      return;\n    }\n    if (!value.split) {\n      console.warn(logTag + ': \"flex: ' + value + '\", value format are not detected, it will be remain as is');\n      style.msFlex = value;\n      return;\n    }\n\n    // The next thing we can look for is if there are multiple values.\n    var flexValues = value.split(/\\s/);\n    // If we only have a single value that wasn't a positive unitless\n    // or a pre-mapped value, then we can assume it is a unit value.\n    switch (flexValues.length) {\n      case 1:\n        style.msFlex = '1 1 ' + value;\n        return;\n      case 2:\n        // If we have 2 units, then we expect that the first will\n        // always be a unitless number and represents flex-grow.\n        // The second unit will represent flex-shrink for a unitless\n        // value, or flex-basis otherwise.\n        if (isUnitlessNumber.test(flexValues[1])) {\n          style.msFlex = flexValues[0] + ' ' + flexValues[1] + ' 0%';\n        } else {\n          style.msFlex = flexValues[0] + ' 1 ' + flexValues[1];\n        }\n        return;\n      default:\n        style.msFlex = value;\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","flexboxIE","alternativeValues","alternativeProps","alignContent","alignSelf","alignItems","justifyContent","order","flexGrow","flexShrink","flexBasis","flexShorthandMappings","auto","inherit","initial","none","unset","isUnitlessNumber","logTag","property","style","hasOwnProperty","prototype","call","msFlex","test","console","warn","split","flexValues","length"],"sources":["C:/Users/julieta/Documents/GitHub/alvarosiles.com/app/node_modules/inline-style-prefixer/lib/plugins/flexboxIE.js"],"sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = flexboxIE;\r\nvar alternativeValues = {\r\n  'space-around': 'distribute',\r\n  'space-between': 'justify',\r\n  'flex-start': 'start',\r\n  'flex-end': 'end'\r\n};\r\nvar alternativeProps = {\r\n  alignContent: 'msFlexLinePack',\r\n  alignSelf: 'msFlexItemAlign',\r\n  alignItems: 'msFlexAlign',\r\n  justifyContent: 'msFlexPack',\r\n  order: 'msFlexOrder',\r\n  flexGrow: 'msFlexPositive',\r\n  flexShrink: 'msFlexNegative',\r\n  flexBasis: 'msFlexPreferredSize'\r\n\r\n  // Full expanded syntax is flex-grow | flex-shrink | flex-basis.\r\n};var flexShorthandMappings = {\r\n  auto: '1 1 auto',\r\n  inherit: 'inherit',\r\n  initial: '0 1 auto',\r\n  none: '0 0 auto',\r\n  unset: 'unset'\r\n};\r\nvar isUnitlessNumber = /^\\d+(\\.\\d+)?$/;\r\nvar logTag = 'inline-style-prefixer.flexboxIE plugin';\r\n\r\nfunction flexboxIE(property, value, style) {\r\n  if (alternativeProps.hasOwnProperty(property)) {\r\n    style[alternativeProps[property]] = alternativeValues[value] || value;\r\n  }\r\n\r\n  if (property === 'flex') {\r\n    // For certain values we can do straight mappings based on the spec\r\n    // for the expansions.\r\n    if (Object.prototype.hasOwnProperty.call(flexShorthandMappings, value)) {\r\n      style.msFlex = flexShorthandMappings[value];\r\n      return;\r\n    }\r\n    // Here we have no direct mapping, so we favor looking for a\r\n    // unitless positive number as that will be the most common use-case.\r\n    if (isUnitlessNumber.test(value)) {\r\n      style.msFlex = value + ' 1 0%';\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number' && value < 0) {\r\n      // ignore negative values;\r\n      console.warn(logTag + ': \"flex: ' + value + '\", negative values are not valid and will be ignored.');\r\n      return;\r\n    }\r\n\r\n    if (!value.split) {\r\n      console.warn(logTag + ': \"flex: ' + value + '\", value format are not detected, it will be remain as is');\r\n      style.msFlex = value;\r\n      return;\r\n    }\r\n\r\n    // The next thing we can look for is if there are multiple values.\r\n    var flexValues = value.split(/\\s/);\r\n    // If we only have a single value that wasn't a positive unitless\r\n    // or a pre-mapped value, then we can assume it is a unit value.\r\n    switch (flexValues.length) {\r\n      case 1:\r\n        style.msFlex = '1 1 ' + value;\r\n        return;\r\n      case 2:\r\n        // If we have 2 units, then we expect that the first will\r\n        // always be a unitless number and represents flex-grow.\r\n        // The second unit will represent flex-shrink for a unitless\r\n        // value, or flex-basis otherwise.\r\n        if (isUnitlessNumber.test(flexValues[1])) {\r\n          style.msFlex = flexValues[0] + ' ' + flexValues[1] + ' 0%';\r\n        } else {\r\n          style.msFlex = flexValues[0] + ' 1 ' + flexValues[1];\r\n        }\r\n        return;\r\n      default:\r\n        style.msFlex = value;\r\n    }\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}