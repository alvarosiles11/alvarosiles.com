{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\r\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\r\n * TouchableOpacity to handle platform differences.\r\n *\r\n * On Android, you can pass the props of TouchableNativeFeedback.\r\n * On other platforms, you can pass the props of TouchableOpacity.\r\n */\nimport * as React from 'react';\nimport { Platform, TouchableNativeFeedback, TouchableOpacity, View } from 'react-native';\nconst ANDROID_VERSION_LOLLIPOP = 21;\nexport default function TouchableItem(_ref) {\n  let {\n    borderless = false,\n    pressColor = 'rgba(0, 0, 0, .32)',\n    style,\n    children,\n    ...rest\n  } = _ref;\n  /*\r\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\r\n   * therefore only enable it on Android Lollipop and above.\r\n   *\r\n   * All touchables on Android should have the ripple effect according to\r\n   * platform design guidelines.\r\n   * We need to pass the background prop to specify a borderless ripple effect.\r\n   */\n  if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return /*#__PURE__*/React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: TouchableNativeFeedback.Ripple(pressColor, borderless)\n    }), /*#__PURE__*/React.createElement(View, {\n      style: style\n    }, React.Children.only(children)));\n  } else {\n    return /*#__PURE__*/React.createElement(TouchableOpacity, _extends({\n      style: style\n    }, rest), children);\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAEEC,uBAFF,EAGEC,gBAHF,EAIEC,IAJF,QAMO,cANP;AAiBA,MAAMC,wBAAwB,GAAG,EAAjC;AAEA,eAAe,SAASC,aAAT,OAML;EAAA,IAN4B;IACpCC,UAAU,GAAG,KADuB;IAEpCC,UAAU,GAAG,oBAFuB;IAGpCC,KAHoC;IAIpCC,QAJoC;IAKpC,GAAGC;EALiC,CAAvB;EAOb;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IACEV,QAAQ,CAACW,EAAT,KAAgB,SAAhB,IACAX,QAAQ,CAACY,OAAT,IAAoBR,wBAFtB,EAGE;IACA,oBACEL,oBAACE,uBAAD,eACMS,IADN;MAEEG,aAAa,EAAEZ,uBAAuB,CAACa,sBAAxB,EAFjB;MAGEC,UAAU,EAAEd,uBAAuB,CAACe,MAAxB,CAA+BT,UAA/B,EAA2CD,UAA3C;IAHd,iBAKEP,oBAACI,IAAD;MAAMK,KAAK,EAAEA;IAAb,GAAqBT,KAAK,CAACkB,QAAN,CAAeC,IAAf,CAAoBT,QAApB,CAArB,CALF,CADF;EASD,CAbD,MAaO;IACL,oBACEV,oBAACG,gBAAD;MAAkBM,KAAK,EAAEA;IAAzB,GAAoCE,IAApC,GACGD,QADH,CADF;EAKD;AACF","names":["React","Platform","TouchableNativeFeedback","TouchableOpacity","View","ANDROID_VERSION_LOLLIPOP","TouchableItem","borderless","pressColor","style","children","rest","OS","Version","useForeground","canUseNativeForeground","background","Ripple","Children","only"],"sources":["TouchableItem.tsx"],"sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}