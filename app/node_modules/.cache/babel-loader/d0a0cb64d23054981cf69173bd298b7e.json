{"ast":null,"code":"import * as React from 'react';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\n/**\r\n * Hook to create descriptor objects for the child routes.\r\n *\r\n * A descriptor object provides 3 things:\r\n * - Helper method to render a screen\r\n * - Options specified by the screen for the navigator\r\n * - Navigation object intended for the route\r\n */\nexport default function useDescriptors(_ref) {\n  let {\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    router,\n    emitter\n  } = _ref;\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange\n  } = React.useContext(NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  const navigations = useNavigationCache({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = useRouteCache(state.routes);\n  return routes.reduce((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null ? screenOptions :\n      // @ts-expect-error: this is a function, but typescript doesn't think so\n      screenOptions({\n        route,\n        navigation\n      })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null ? screen.options :\n      // @ts-expect-error: this is a function, but typescript doesn't think so\n      screen.options({\n        route,\n        navigation\n      })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key]\n    };\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function' ?\n      // @ts-expect-error: ts gives incorrect error here\n      defaultScreenOptions({\n        route,\n        navigation,\n        options: routeOptions\n      }) : defaultScreenOptions),\n      ...routeOptions\n    };\n    const clearOptions = () => setOptions(o => {\n      if (route.key in o) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n          [route.key]: _,\n          ...rest\n        } = o;\n        return rest;\n      }\n      return o;\n    });\n    acc[route.key] = {\n      navigation,\n      render() {\n        return /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, /*#__PURE__*/React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"mappings":"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","names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useRouteCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","screen","name","key","routeOptions","mergedOptions","clearOptions","o","_","rest","render","Provider","value","routeState"],"sources":["useDescriptors.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route, i) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: routeOptions,\n          })\n        : defaultScreenOptions),\n      ...routeOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}