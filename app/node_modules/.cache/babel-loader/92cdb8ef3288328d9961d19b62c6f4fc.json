{"ast":null,"code":"import * as React from 'react';\nimport { getStateFromPath as getStateFromPathDefault, getPathFromState as getPathFromStateDefault, getActionFromState as getActionFromStateDefault } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n  const history = {\n    get index() {\n      var _window$history$state;\n\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n      return 0;\n    },\n    get(index) {\n      return items[index];\n    },\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref;\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n    replace(_ref3) {\n      let {\n        path,\n        state\n      } = _ref3;\n      var _window$history$state2, _window$history$state3;\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n      if (items.length) {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({\n          path,\n          state,\n          id\n        });\n      }\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n      if (n === 0) {\n        return;\n      }\n      index += n; // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        const onPopState = () => {\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n  return callback;\n};\nlet isUsingLinking = false;\nexport default function useLinking(ref, _ref4) {\n  let {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault\n  } = _ref4;\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:', \"- You are not using both 'linking' prop and 'useLinking'\", \"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n    if (enabledRef.current) {\n      var _server$location;\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      }\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/5.x/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\"An error occurred when trying to handle the link '\".concat(path, \"': \").concat(e.message));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      if (state) {\n        const path = getPathFromStateRef.current(state, configRef.current);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n    const onStateChange = async () => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n      if (previousFocusedState && focusedState &&\n      // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            } // Store the updated state as well as fix the path if incorrect\n\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {// The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"mappings":"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","names":["React","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","getActionFromStateDefault","nanoid","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","isUsingLinking","useLinking","enabled","config","useEffect","join","trim","useState","enabledRef","useRef","configRef","getStateFromPathRef","getActionFromStateRef","getPathFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","console","warn","action","dispatch","e","message","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","currentIndex","_ref$current","addListener"],"sources":["useLinking.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  getActionFromState as getActionFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n    getPathFromStateRef.current = getPathFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/5.x/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const path = getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}