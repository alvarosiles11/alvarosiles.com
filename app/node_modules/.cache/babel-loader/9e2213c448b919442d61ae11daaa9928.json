{"ast":null,"code":"import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(path, options) {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n  let initialRoutes = [];\n  if (compatOptions !== null && compatOptions !== void 0 && compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n  // Make sure there is a trailing slash\n\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map((segment, i, self) => {\n      const name = decodeURIComponent(segment);\n      if (i === self.length - 1) {\n        return {\n          name,\n          params: parseQueryParams(path)\n        };\n      }\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n    return undefined;\n  } // Create a normalized configs array which will be easier to use\n\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(legacy, key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    } // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    const aWildcardIndex = aParts.indexOf('*');\n    const bWildcardIndex = bParts.indexOf('*'); // If only one of the patterns has a wildcard, move it down in the list\n\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n    if (aWildcardIndex === bWildcardIndex) {\n      // If `b` has more `/`, it's more exhaustive\n      // So we move it up in the list\n      return bParts.length - aParts.length;\n    } // If the wildcard appears later in the pattern (has higher index), it's more specific\n    // So we move it up in the list\n\n    return bWildcardIndex - aWildcardIndex;\n  }); // Check for duplicate patterns in the config\n\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames; // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\".concat(config.pattern, \"' resolves to both '\").concat(a.join(' > '), \"' and '\").concat(b.join(' > '), \"'. Patterns must be unique and cannot resolve to more than one screen.\"));\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(match.routeNames.map((name, i, self) => {\n        if (i === self.length - 1) {\n          return {\n            name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n        return {\n          name\n        };\n      }), initialRoutes);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    })));\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let {\n        routes,\n        remainingPath\n      } = matchAgainstConfigs(remaining, configs);\n      remaining = remainingPath; // If we hadn't matched any segments earlier, use the path as route name\n\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n        routes = [{\n          name: decodeURIComponent(segments[0])\n        }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n      const state = createNestedStateObject(routes, initialRoutes);\n      if (current) {\n        var _current2;\n\n        // The state should be nested inside the deepest route we parsed before\n        while ((_current = current) !== null && _current !== void 0 && _current.routes[current.index || 0].state) {\n          var _current;\n          current = current.routes[current.index || 0].state;\n        }\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n      current = state;\n    }\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining; // Go through all configs, and see if the next path segment matches our regex\n\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex); // If our regex matches, we need to extract params from the path\n\n    if (match) {\n      var _config$pattern;\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (legacy, screen, routeConfig) {\n  let routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let initials = arguments.length > 4 ? arguments[4] : undefined;\n  let parentScreens = arguments.length > 5 ? arguments[5] : undefined;\n  let parentPattern = arguments.length > 6 ? arguments[6] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern; // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n      configs.push(createConfigItem(legacy, screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        var _pattern;\n        const result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, [...parentScreens], (_pattern = pattern) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (legacy, screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(it => {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\");\n    }\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n}; // Try to find an initial route connected with the one passed\n\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n}; // returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\n\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (routes, initialRoutes) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  return state;\n};\nconst findFocusedRoute = state => {\n  var _current4;\n  let current = state;\n  while ((_current3 = current) !== null && _current3 !== void 0 && _current3.routes[current.index || 0].state) {\n    var _current3;\n\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n  const route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"mappings":"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","names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","_configs$find","parse","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","segments","shift","state","_current","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","matchedParams","_config$pattern","_config$path","value","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","_current3","parseConfig","query"],"sources":["getStateFromPath.tsx"],"sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  params?: Record<string, any> | undefined;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routes, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(routes, initialRoutes);\n      remaining = remainingPath;\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routes, remainingPath } = matchAgainstConfigs(remaining, configs);\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routes === undefined) {\n        const segments = remaining.split('/');\n\n        routes = [{ name: decodeURIComponent(segments[0]) }];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(routes, initialRoutes);\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchedParams = config.pattern\n        ?.split('/')\n        .filter((p) => p.startsWith(':'))\n        .reduce<Record<string, any>>(\n          (acc, p, i) =>\n            Object.assign(acc, {\n              // The param segments appear every second item starting from 2 in the regex match result\n              [p]: match![(i + 1) * 2].replace(/\\//, ''),\n            }),\n          {}\n        );\n\n      routes = config.routeNames.map((name) => {\n        const config = configs.find((c) => c.screen === name);\n        const params = config?.path\n          ?.split('/')\n          .filter((p) => p.startsWith(':'))\n          .reduce<Record<string, any>>((acc, p) => {\n            const value = matchedParams[p];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/5.x/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  return state;\n};\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}