{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  const router = {\n    ...BaseRouter,\n    type: 'stack',\n    getInitialState(_ref) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref;\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, _ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({\n        ...route,\n        key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n        params: routeParamList[route.name] !== undefined ? {\n          ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n    getStateForRouteNamesChange(state, _ref3) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n      const routes = state.routes.filter(route => routeNames.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return {\n              ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                name,\n                params: routeParamList[name] !== undefined ? {\n                  ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = action.payload.name && action.payload.key ? state.routes.find(route => route.name === action.payload.name && route.key === action.payload.key) : id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push({\n                ...route,\n                params: action.payload.params !== undefined ? {\n                  ...route.params,\n                  ...action.payload.params\n                } : route.params\n              });\n            } else {\n              var _action$payload$key;\n              routes = [...state.routes, {\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n          return null;\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return {\n                ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n            const getId =\n            // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (index === -1 && action.payload.name !== undefined) {\n              var _action$payload$key2;\n              const routes = [...state.routes, {\n                key: (_action$payload$key2 = action.payload.key) !== null && _action$payload$key2 !== void 0 ? _action$payload$key2 : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1\n              };\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge === false) {\n              params = routeParamList[route.name] !== undefined ? {\n                ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            } else {\n              params = action.payload.params ? {\n                ...route.params,\n                ...action.payload.params\n              } : route.params;\n            }\n            return {\n              ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params ? {\n                ...route,\n                params\n              } : state.routes[index]]\n            };\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  };\n  return router;\n}","map":{"version":3,"mappings":"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","names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","merge","actionCreators"],"sources":["StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<\n  ParamList extends ParamListBase\n> = NavigationState<ParamList> & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route =\n              action.payload.name && action.payload.key\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      route.key === action.payload.key\n                  )\n                : id\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      id === getId?.({ params: route.params })\n                  )\n                : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  action.payload.params !== undefined\n                    ? {\n                        ...route.params,\n                        ...action.payload.params,\n                      }\n                    : route.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge === false) {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            } else {\n              params = action.payload.params\n                ? {\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params\n                  ? { ...route, params }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}