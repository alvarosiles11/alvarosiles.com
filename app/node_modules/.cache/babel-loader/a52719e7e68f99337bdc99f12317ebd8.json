{"ast":null,"code":"import * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationContext from './NavigationContext';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useChildListeners from './useChildListeners';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nimport checkSerializable from './checkSerializable';\nconst NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/5.x/navigating-without-navigation-prop#handling-initialization for more details.\";\nconst serializableWarnings = [];\ntry {\n  /**\r\n   * Migration instructions for removal of devtools from core\r\n   */\n  Object.defineProperty(global, 'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED', {\n    set(_) {\n      console.warn(\"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/5.x/devtools\");\n    }\n  });\n} catch (e) {// Ignore\n}\n/**\r\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\r\n *\r\n * @param state Initial state object.\r\n */\n\nconst getPartialState = state => {\n  if (state === undefined) {\n    return;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const {\n    key,\n    routeNames,\n    ...partialState\n  } = state;\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route;\n      }\n      return {\n        ...route,\n        state: getPartialState(route.state)\n      };\n    })\n  };\n};\n/**\r\n * Container component which holds the navigation state.\r\n * This should be rendered at the root wrapping the whole app.\r\n *\r\n * @param props.initialState Initial state object for the navigation tree.\r\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\r\n * @param props.children Child elements to render the content.\r\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\r\n */\n\nconst BaseNavigationContainer = /*#__PURE__*/React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  let {\n    initialState,\n    onStateChange,\n    onUnhandledAction,\n    independent,\n    children\n  } = _ref;\n  const parent = React.useContext(NavigationStateContext);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  const [state, getState, setState, scheduleUpdate, flushUpdates] = useSyncState(() => getPartialState(initialState == null ? undefined : initialState));\n  const isFirstMountRef = React.useRef(true);\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const {\n    listeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const dispatch = action => {\n    if (listeners.focus[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    listeners.focus[0](navigation => navigation.dispatch(action));\n  };\n  const canGoBack = () => {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    const {\n      result,\n      handled\n    } = listeners.focus[0](navigation => navigation.canGoBack());\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n  const resetRoot = React.useCallback(state => {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n    const target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n    if (target == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n    listeners.focus[0](navigation => navigation.dispatch({\n      ...CommonActions.reset(state),\n      target\n    }));\n  }, [keyedListeners.getState, listeners.focus]);\n  const getRootState = React.useCallback(() => {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  const getCurrentRoute = React.useCallback(() => {\n    let state = getRootState();\n    if (state === undefined) {\n      return undefined;\n    }\n    while (state.routes[state.index].state !== undefined) {\n      state = state.routes[state.index].state;\n    }\n    return state.routes[state.index];\n  }, [getRootState]);\n  const emitter = useEventEmitter();\n  const {\n    addOptionsGetter,\n    getCurrentOptions\n  } = useOptionsGetters({});\n  React.useImperativeHandle(ref, () => ({\n    ...Object.keys(CommonActions).reduce((acc, name) => {\n      acc[name] = function () {\n        return dispatch(CommonActions[name](\n        // @ts-expect-error: we can't know the type statically\n        ...arguments));\n      };\n      return acc;\n    }, {}),\n    ...emitter.create('root'),\n    resetRoot,\n    dispatch,\n    canGoBack,\n    getRootState,\n    getState: () => state,\n    getParent: () => undefined,\n    dangerouslyGetState: () => state,\n    dangerouslyGetParent: () => undefined,\n    getCurrentRoute,\n    getCurrentOptions\n  }));\n  const onDispatchAction = React.useCallback((action, noop) => {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action,\n        noop\n      }\n    });\n  }, [emitter]);\n  const lastEmittedOptionsRef = React.useRef();\n  const onOptionsChange = React.useCallback(options => {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options\n      }\n    });\n  }, [emitter]);\n  const builderContext = React.useMemo(() => ({\n    addListener,\n    addKeyedListener,\n    onDispatchAction,\n    onOptionsChange\n  }), [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  const scheduleContext = React.useMemo(() => ({\n    scheduleUpdate,\n    flushUpdates\n  }), [scheduleUpdate, flushUpdates]);\n  const isInitialRef = React.useRef(true);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state,\n    getState,\n    setState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const onStateChangeRef = React.useRef(onStateChange);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n  });\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined) {\n        const result = checkSerializable(state);\n        if (!result.serializable) {\n          const {\n            location,\n            reason\n          } = result;\n          let path = '';\n          let pointer = state;\n          let params = false;\n          for (let i = 0; i < location.length; i++) {\n            const curr = location[i];\n            const prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \".concat(curr);\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\".concat(curr, \"]\");\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\".concat(curr);\n              } else {\n                path += \"[\".concat(JSON.stringify(curr), \"]\");\n              }\n            }\n          }\n          const message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\".concat(path, \" (\").concat(reason, \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/5.x/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\");\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(getRootState());\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  const defaultOnUnhandledAction = React.useCallback(action => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const payload = action.payload;\n    let message = \"The action '\".concat(action.type, \"'\").concat(payload ? \" with payload \".concat(JSON.stringify(action.payload)) : '', \" was not handled by any navigator.\");\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\".concat(payload.name, \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/5.x/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\");\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/5.x/navigation-actions for usage.\";\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  let element = /*#__PURE__*/React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, children)))));\n  if (independent) {\n    // We need to clear any existing contexts for nested independent container to work correctly\n    element = /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"mappings":"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","names":["React","CommonActions","EnsureSingleNavigator","UnhandledActionContext","NavigationBuilderContext","NavigationStateContext","NavigationRouteContext","NavigationContext","ScheduleUpdateContext","useChildListeners","useKeyedChildListeners","useOptionsGetters","useEventEmitter","useSyncState","checkSerializable","NOT_INITIALIZED_ERROR","serializableWarnings","Object","defineProperty","global","set","_","console","warn","e","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","index","emitter","addOptionsGetter","getCurrentOptions","useImperativeHandle","keys","reduce","acc","name","create","getParent","dangerouslyGetState","dangerouslyGetParent","onDispatchAction","noop","emit","type","data","lastEmittedOptionsRef","onOptionsChange","options","builderContext","useMemo","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","process","env","NODE_ENV","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","defaultOnUnhandledAction","payload","error","element","Provider","value"],"sources":["BaseNavigationContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationContext from './NavigationContext';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useChildListeners from './useChildListeners';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nimport checkSerializable from './checkSerializable';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerProps,\n} from './types';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/5.x/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nconst serializableWarnings: string[] = [];\n\ntry {\n  /**\n   * Migration instructions for removal of devtools from core\n   */\n  Object.defineProperty(\n    global,\n    'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED',\n    {\n      set(_) {\n        console.warn(\n          \"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/5.x/devtools\"\n        );\n      },\n    }\n  );\n} catch (e) {\n  // Ignore\n}\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [\n      state,\n      getState,\n      setState,\n      scheduleUpdate,\n      flushUpdates,\n    ] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners.focus[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners.focus[0]((navigation) => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          throw new Error(NOT_INITIALIZED_ERROR);\n        }\n\n        listeners.focus[0]((navigation) =>\n          navigation.dispatch({\n            ...CommonActions.reset(state),\n            target,\n          })\n        );\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      let state = getRootState();\n      if (state === undefined) {\n        return undefined;\n      }\n      while (state.routes[state.index].state !== undefined) {\n        state = state.routes[state.index].state as NavigationState;\n      }\n      return state.routes[state.index];\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-expect-error: we can't know the type statically\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n      getState: () => state,\n      getParent: () => undefined,\n      dangerouslyGetState: () => state,\n      dangerouslyGetParent: () => undefined,\n      getCurrentRoute,\n      getCurrentOptions,\n    }));\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({ type: '__unsafe_action__', data: { action, noop } });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n    });\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (state !== undefined) {\n          const result = checkSerializable(state);\n\n          if (!result.serializable) {\n            const { location, reason } = result;\n\n            let path = '';\n            let pointer: Record<any, any> = state;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/5.x/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/5.x/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/5.x/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <ScheduleUpdateContext.Provider value={scheduleContext}>\n        <NavigationBuilderContext.Provider value={builderContext}>\n          <NavigationStateContext.Provider value={context}>\n            <UnhandledActionContext.Provider\n              value={onUnhandledAction ?? defaultOnUnhandledAction}\n            >\n              <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n            </UnhandledActionContext.Provider>\n          </NavigationStateContext.Provider>\n        </NavigationBuilderContext.Provider>\n      </ScheduleUpdateContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}