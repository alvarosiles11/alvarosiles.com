{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { BaseNavigationContainer } from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useDocumentTitle from './useDocumentTitle';\nimport useBackButton from './useBackButton';\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = /*#__PURE__*/React.forwardRef(function NavigationContainer(_ref, ref) {\n  let {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  } = _ref;\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n  const refContainer = React.useRef(null);\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n  const {\n    getInitialState\n  } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking\n  });\n  const [isResolved, initialState] = useThenable(getInitialState);\n  React.useImperativeHandle(ref, () => refContainer.current);\n  const linkingContext = React.useMemo(() => ({\n    options: linking\n  }), [linking]);\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n  const onReadyRef = React.useRef(onReady);\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n  React.useEffect(() => {\n    if (isReady) {\n      var _onReadyRef$current;\n      (_onReadyRef$current = onReadyRef.current) === null || _onReadyRef$current === void 0 ? void 0 : _onReadyRef$current.call(onReadyRef);\n    }\n  }, [isReady]);\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback;\n  }\n  return /*#__PURE__*/React.createElement(LinkingContext.Provider, {\n    value: linkingContext\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    value: theme\n  }, /*#__PURE__*/React.createElement(BaseNavigationContainer, _extends({}, rest, {\n    initialState: rest.initialState == null ? initialState : rest.initialState,\n    ref: refContainer\n  }))));\n});\nexport default NavigationContainer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,uBADF,QAIO,wBAJP;AAKA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,gBAAGT,KAAK,CAACU,UAAN,CAAiB,SAASD,mBAAT,OAS3CE,GAT2C,EAU3C;EAAA,IATA;IACEC,KAAK,GAAGT,YADV;IAEEU,OAFF;IAGEC,QAAQ,GAAG,IAHb;IAIEC,aAJF;IAKEC,OALF;IAME,GAAGC;EANL,CAD2C;EAW3C,MAAMC,gBAAgB,GAAGL,OAAO,GAAGA,OAAO,CAACM,OAAR,KAAoB,KAAvB,GAA+B,KAA/D;EAEA,MAAMC,YAAY,GAAGpB,KAAK,CAACqB,MAAN,CAAqC,IAArC,CAArB;EAEAb,aAAa,CAACY,YAAD,CAAb;EACAb,gBAAgB,CAACa,YAAD,EAAeL,aAAf,CAAhB;EAEA,MAAM;IAAEO;EAAF,IAAsBhB,UAAU,CAACc,YAAD,EAAe;IACnDD,OAAO,EAAED,gBAD0C;IAEnDK,QAAQ,EAAE,EAFyC;IAGnD,GAAGV;EAHgD,CAAf,CAAtC;EAMA,MAAM,CAACW,UAAD,EAAaC,YAAb,IAA6BpB,WAAW,CAACiB,eAAD,CAA9C;EAEAtB,KAAK,CAAC0B,mBAAN,CAA0Bf,GAA1B,EAA+B,MAAMS,YAAY,CAACO,OAAlD;EAEA,MAAMC,cAAc,GAAG5B,KAAK,CAAC6B,OAAN,CAAc,OAAO;IAAEC,OAAO,EAAEjB;EAAX,CAAP,CAAd,EAA4C,CAACA,OAAD,CAA5C,CAAvB;EAEA,MAAMkB,OAAO,GAAGd,IAAI,CAACQ,YAAL,IAAqB,IAArB,IAA6B,CAACP,gBAA9B,IAAkDM,UAAlE;EAEA,MAAMQ,UAAU,GAAGhC,KAAK,CAACqB,MAAN,CAAaL,OAAb,CAAnB;EAEAhB,KAAK,CAACiC,SAAN,CAAgB,MAAM;IACpBD,UAAU,CAACL,OAAX,GAAqBX,OAArB;EACD,CAFD;EAIAhB,KAAK,CAACiC,SAAN,CAAgB,MAAM;IACpB,IAAIF,OAAJ,EAAa;MAAA;MACX,iCAAU,CAACJ,OAAX,2FAAU;IACX;EACF,CAJD,EAIG,CAACI,OAAD,CAJH;EAMA,IAAI,CAACA,OAAL,EAAc;IACZ;IACA;IACA,OAAOjB,QAAP;EACD;EAED,oBACEd,oBAACI,cAAD,CAAgB8B,QAAhB;IAAyBC,KAAK,EAAEP;EAAhC,gBACE5B,oBAACE,aAAD;IAAeiC,KAAK,EAAEvB;EAAtB,gBACEZ,oBAACC,uBAAD,eACMgB,IADN;IAEEQ,YAAY,EACVR,IAAI,CAACQ,YAAL,IAAqB,IAArB,GAA4BA,YAA5B,GAA2CR,IAAI,CAACQ,YAHpD;IAKEd,GAAG,EAAES;EALP,GADF,CADF,CADF;AAaD,CA/D2B,CAA5B;AAiEA,eAAeX,mBAAf","names":["React","BaseNavigationContainer","ThemeProvider","DefaultTheme","LinkingContext","useThenable","useLinking","useDocumentTitle","useBackButton","NavigationContainer","forwardRef","ref","theme","linking","fallback","documentTitle","onReady","rest","isLinkingEnabled","enabled","refContainer","useRef","getInitialState","prefixes","isResolved","initialState","useImperativeHandle","current","linkingContext","useMemo","options","isReady","onReadyRef","useEffect","Provider","value"],"sources":["NavigationContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useDocumentTitle from './useDocumentTitle';\nimport useBackButton from './useBackButton';\nimport type { Theme, LinkingOptions, DocumentTitleOptions } from './types';\n\ntype Props = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions;\n  fallback?: React.ReactNode;\n  documentTitle?: DocumentTitleOptions;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.documentTitle Options to configure the document title on Web. Updating document title is handled by default unless `documentTitle.enabled` is `false`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = React.forwardRef(function NavigationContainer(\n  {\n    theme = DefaultTheme,\n    linking,\n    fallback = null,\n    documentTitle,\n    onReady,\n    ...rest\n  }: Props,\n  ref?: React.Ref<NavigationContainerRef | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  const refContainer = React.useRef<NavigationContainerRef>(null);\n\n  useBackButton(refContainer);\n  useDocumentTitle(refContainer, documentTitle);\n\n  const { getInitialState } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n});\n\nexport default NavigationContainer;\n"]},"metadata":{},"sourceType":"module"}