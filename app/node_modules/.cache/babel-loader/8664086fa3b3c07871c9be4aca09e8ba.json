{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Animated, View, StyleSheet, Platform, InteractionManager } from 'react-native';\nimport Color from 'color';\nimport CardSheet from './CardSheet';\nimport { PanGestureHandler, GestureState } from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\n/**\r\n * The distance of touch start from the edge of the screen where the gesture will be recognized\r\n */\n\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nconst hasOpacityStyle = style => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n  return false;\n};\nexport default class Card extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"isCurrentlyMounted\", false);\n    _defineProperty(this, \"isClosing\", new Animated.Value(FALSE));\n    _defineProperty(this, \"inverted\", new Animated.Value(getInvertedMultiplier(this.props.gestureDirection)));\n    _defineProperty(this, \"layout\", {\n      width: new Animated.Value(this.props.layout.width),\n      height: new Animated.Value(this.props.layout.height)\n    });\n    _defineProperty(this, \"isSwiping\", new Animated.Value(FALSE));\n    _defineProperty(this, \"interactionHandle\", void 0);\n    _defineProperty(this, \"pendingGestureCallback\", void 0);\n    _defineProperty(this, \"lastToValue\", void 0);\n    _defineProperty(this, \"animate\", _ref => {\n      let {\n        closing,\n        velocity\n      } = _ref;\n      const {\n        gesture,\n        transitionSpec,\n        onOpen,\n        onClose,\n        onTransition\n      } = this.props;\n      const toValue = this.getAnimateToValue({\n        ...this.props,\n        closing\n      });\n      this.lastToValue = toValue;\n      const spec = closing ? transitionSpec.close : transitionSpec.open;\n      const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      this.setPointerEventsEnabled(!closing);\n      this.handleStartInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      onTransition === null || onTransition === void 0 ? void 0 : onTransition({\n        closing,\n        gesture: velocity !== undefined\n      });\n      animation(gesture, {\n        ...spec.config,\n        velocity,\n        toValue,\n        useNativeDriver,\n        isInteraction: false\n      }).start(_ref2 => {\n        let {\n          finished\n        } = _ref2;\n        this.handleEndInteraction();\n        clearTimeout(this.pendingGestureCallback);\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n          if (this.isCurrentlyMounted) {\n            // Make sure to re-open screen if it wasn't removed\n            this.forceUpdate();\n          }\n        }\n      });\n    });\n    _defineProperty(this, \"getAnimateToValue\", _ref3 => {\n      let {\n        closing,\n        layout,\n        gestureDirection\n      } = _ref3;\n      if (!closing) {\n        return 0;\n      }\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n    _defineProperty(this, \"setPointerEventsEnabled\", enabled => {\n      var _this$contentRef$curr;\n      const pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents\n      });\n    });\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(this, \"handleGestureStateChange\", _ref4 => {\n      let {\n        nativeEvent\n      } = _ref4;\n      const {\n        layout,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        gestureDirection,\n        gestureVelocityImpact\n      } = this.props;\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          this.isSwiping.setValue(TRUE);\n          this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n        case GestureState.CANCELLED:\n          {\n            this.isSwiping.setValue(FALSE);\n            this.handleEndInteraction();\n            const velocity = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? nativeEvent.velocityY : nativeEvent.velocityX;\n            this.animate({\n              closing: this.props.closing,\n              velocity\n            });\n            onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n            break;\n          }\n        case GestureState.END:\n          {\n            this.isSwiping.setValue(FALSE);\n            let distance;\n            let translation;\n            let velocity;\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n            const closing = (translation + velocity * gestureVelocityImpact) * getInvertedMultiplier(gestureDirection) > distance / 2 ? velocity !== 0 || translation !== 0 : this.props.closing;\n            this.animate({\n              closing,\n              velocity\n            });\n            if (closing) {\n              // We call onClose with a delay to make sure that the animation has already started\n              // This will make sure that the state update caused by this doesn't affect start of animation\n              this.pendingGestureCallback = setTimeout(() => {\n                onClose(); // Trigger an update after we dispatch the action to remove the screen\n                // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n\n                this.forceUpdate();\n              }, 32);\n            }\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n    _defineProperty(this, \"getInterpolatedStyle\", memoize((styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => styleInterpolator({\n      index,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n    _defineProperty(this, \"getCardAnimationContext\", memoize((index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n      index,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n    _defineProperty(this, \"contentRef\", /*#__PURE__*/React.createRef());\n  }\n  componentDidMount() {\n    this.animate({\n      closing: this.props.closing\n    });\n    this.isCurrentlyMounted = true;\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      layout,\n      gestureDirection,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n    const toValue = this.getAnimateToValue(this.props);\n    if (this.getAnimateToValue(prevProps) !== toValue || this.lastToValue !== toValue) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({\n        closing\n      });\n    }\n  }\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n  gestureActivationCriteria() {\n    const {\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        }\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        }\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          }\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          }\n        };\n      }\n    }\n  }\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = typeof backgroundColor === 'string' ? Color(backgroundColor).alpha() === 0 : false;\n    return /*#__PURE__*/React.createElement(CardAnimationContext.Provider, {\n      value: animationContext\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: {\n        // This is a dummy style that doesn't actually change anything visually.\n        // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n        // If we disable animations and hide header, it could end up making the value unused.\n        // So we have this dummy style that will always be used regardless of what else changed.\n        opacity: current\n      } // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n      ,\n\n      collapsable: false\n    }), /*#__PURE__*/React.createElement(View, _extends({\n      pointerEvents: \"box-none\"\n    }, rest), overlayEnabled ? /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: StyleSheet.absoluteFill\n    }, overlay({\n      style: overlayStyle\n    })) : null, /*#__PURE__*/React.createElement(Animated.View, {\n      needsOffscreenAlphaCompositing: hasOpacityStyle(containerStyle),\n      style: [styles.container, containerStyle, customContainerStyle],\n      pointerEvents: \"box-none\"\n    }, /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      enabled: layout.width !== 0 && gestureEnabled,\n      onGestureEvent: handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange\n    }, this.gestureActivationCriteria()), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.container, cardStyle]\n    }, shadowEnabled && shadowStyle && !isTransparent ? /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], {\n        backgroundColor\n      }, shadowStyle],\n      pointerEvents: \"none\"\n    }) : null, /*#__PURE__*/React.createElement(CardSheet, {\n      ref: this.contentRef,\n      enabled: pageOverflowEnabled,\n      layout: layout,\n      style: contentStyle\n    }, children))))));\n  }\n}\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: _ref5 => {\n    let {\n      style\n    } = _ref5;\n    return style ? /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"none\",\n      style: [styles.overlay, style]\n    }) : null;\n  }\n});\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","Platform","InteractionManager","Color","CardSheet","PanGestureHandler","GestureState","CardAnimationContext","getDistanceForDirection","getInvertedMultiplier","memoize","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","OS","hasOpacityStyle","style","flattenedStyle","flatten","opacity","Card","Component","constructor","_defineProperty","Value","props","gestureDirection","width","layout","height","closing","velocity","gesture","transitionSpec","onOpen","onClose","onTransition","toValue","getAnimateToValue","lastToValue","spec","close","open","animation","spring","timing","setPointerEventsEnabled","handleStartInteraction","clearTimeout","pendingGestureCallback","undefined","config","isInteraction","start","finished","handleEndInteraction","isCurrentlyMounted","forceUpdate","enabled","pointerEvents","contentRef","current","setNativeProps","interactionHandle","createInteractionHandle","clearInteractionHandle","nativeEvent","onGestureBegin","onGestureCanceled","onGestureEnd","gestureVelocityImpact","state","BEGAN","isSwiping","setValue","CANCELLED","velocityY","velocityX","animate","END","distance","translation","translationY","translationX","setTimeout","styleInterpolator","index","next","insetTop","insetRight","insetBottom","insetLeft","progress","isClosing","swiping","inverted","layouts","screen","insets","top","right","bottom","left","createRef","componentDidMount","componentDidUpdate","prevProps","componentWillUnmount","gestureActivationCriteria","gestureResponseDistance","vertical","horizontal","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","overlay","overlayEnabled","shadowEnabled","gestureEnabled","pageOverflowEnabled","children","containerStyle","customContainerStyle","contentStyle","rest","interpolatedStyle","getInterpolatedStyle","animationContext","getCardAnimationContext","cardStyle","overlayStyle","shadowStyle","handleGestureEvent","event","backgroundColor","isTransparent","alpha","Provider","value","collapsable","absoluteFill","needsOffscreenAlphaCompositing","styles","container","onGestureEvent","onHandlerStateChange","handleGestureStateChange","shadow","shadowHorizontal","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom","ref","create","flex","position","shadowRadius","shadowColor","shadowOpacity","shadowOffset"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\n\nimport CardSheet from './CardSheet';\nimport {\n  PanGestureHandler,\n  GestureState,\n  PanGestureHandlerGestureEvent,\n} from '../GestureHandler';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport type {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  pageOverflowEnabled: boolean;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransition?: (props: { closing: boolean; gesture: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst hasOpacityStyle = (style: any) => {\n  if (style) {\n    const flattenedStyle = StyleSheet.flatten(style);\n    return flattenedStyle.opacity != null;\n  }\n\n  return false;\n};\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({\n      style,\n    }: {\n      style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n    }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n    this.isCurrentlyMounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    const toValue = this.getAnimateToValue(this.props);\n\n    if (\n      this.getAnimateToValue(prevProps) !== toValue ||\n      this.lastToValue !== toValue\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.isCurrentlyMounted = false;\n    this.handleEndInteraction();\n  }\n\n  private isCurrentlyMounted = false;\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private lastToValue: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransition,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    this.lastToValue = toValue;\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransition?.({ closing, gesture: velocity !== undefined });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n\n        if (this.isCurrentlyMounted) {\n          // Make sure to re-open screen if it wasn't removed\n          this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED: {\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n\n        const velocity =\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n            ? nativeEvent.velocityY\n            : nativeEvent.velocityX;\n\n        this.animate({ closing: this.props.closing, velocity });\n\n        onGestureCanceled?.();\n        break;\n      }\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const closing =\n          (translation + velocity * gestureVelocityImpact) *\n            getInvertedMultiplier(gestureDirection) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : this.props.closing;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(() => {\n            onClose();\n\n            // Trigger an update after we dispatch the action to remove the screen\n            // This will make sure that we check if the screen didn't get removed so we can cancel the animation\n            this.forceUpdate();\n          }, 32) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      pageOverflowEnabled,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent =\n      typeof backgroundColor === 'string'\n        ? Color(backgroundColor).alpha() === 0\n        : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <Animated.View\n          style={{\n            // This is a dummy style that doesn't actually change anything visually.\n            // Animated needs the animated value to be used somewhere, otherwise things don't update properly.\n            // If we disable animations and hide header, it could end up making the value unused.\n            // So we have this dummy style that will always be used regardless of what else changed.\n            opacity: current,\n          }}\n          // Make sure that this view isn't removed. If this view is removed, our style with animated value won't apply\n          collapsable={false}\n        />\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            needsOffscreenAlphaCompositing={hasOpacityStyle(containerStyle)}\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      { backgroundColor },\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <CardSheet\n                  ref={this.contentRef}\n                  enabled={pageOverflowEnabled}\n                  layout={layout}\n                  style={contentStyle}\n                >\n                  {children}\n                </CardSheet>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}