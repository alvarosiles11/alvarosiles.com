{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Animated, StyleSheet, Dimensions, Platform } from 'react-native';\nimport { screensEnabled } from 'react-native-screens';\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport CardContainer from './CardContainer';\nimport { DefaultTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nconst EPSILON = 0.01;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getHeaderHeights = (routes, insets, isParentHeaderShown, descriptors, layout, previous) => {\n  return routes.reduce((acc, curr) => {\n    const {\n      options = {}\n    } = descriptors[curr.key] || {};\n    const style = StyleSheet.flatten(options.headerStyle || {});\n    const height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets\n    };\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top\n    } = options;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (mode, layout, descriptor) => {\n  const {\n    gestureDirection = mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\nconst getProgressFromGesture = (mode, gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions(mode, {\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n        const oldScene = state.scenes[index];\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n            next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n    };\n  }\n  constructor(_props) {\n    super(_props);\n    _defineProperty(this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(this, \"handleHeaderLayout\", _ref => {\n      let {\n        route,\n        height\n      } = _ref;\n      this.setState(_ref2 => {\n        let {\n          headerHeights\n        } = _ref2;\n        const previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: {\n            ...headerHeights,\n            [route.key]: height\n          }\n        };\n      });\n    });\n    _defineProperty(this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = this.props;\n      return state.routes[state.index];\n    });\n    _defineProperty(this, \"getPreviousScene\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        getPreviousRoute\n      } = this.props;\n      const {\n        scenes\n      } = this.state;\n      const previousRoute = getPreviousRoute({\n        route\n      });\n      if (previousRoute) {\n        const previousScene = scenes.find(scene => scene.route.key === previousRoute.key);\n        return previousScene;\n      }\n      return undefined;\n    });\n    const {\n      height: _height = 0,\n      width: _width = 0\n    } = Dimensions.get('window');\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n  }\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    let defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader\n      };\n    }\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left\n    } = focusedOptions.safeAreaInsets || {};\n    let activeScreensLimit = 1;\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal' ? i !== scenes.length - 1 : true\n      } = scenes[i].descriptor.options;\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n    const isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(scene => {\n      const {\n        descriptor\n      } = scene;\n      const options = descriptor ? descriptor.options : {};\n      const {\n        headerTransparent,\n        headerShown = true\n      } = options;\n      if (headerTransparent || headerShown === false) {\n        return true;\n      }\n      return false;\n    }) : false;\n    const floatingHeader = headerMode === 'float' ? /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"header\"\n    }, renderHeader({\n      mode: 'float',\n      layout,\n      insets: {\n        top,\n        right,\n        bottom,\n        left\n      },\n      scenes,\n      getPreviousScene: this.getPreviousScene,\n      getFocusedRoute: this.getFocusedRoute,\n      onContentHeightChange: this.handleHeaderLayout,\n      gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n      styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n      style: [styles.floating, isFloatHeaderAbsolute && [\n      // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n      {\n        height: focusedHeaderHeight\n      }, styles.absolute]]\n    })) : null;\n    const isScreensEnabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: isScreensEnabled,\n      style: styles.container,\n      onLayout: this.handleLayout\n    }, routes.map((route, index, self) => {\n      const focused = focusedRoute.key === route.key;\n      const gesture = gestures[route.key];\n      const scene = scenes[index]; // For the screens that shouldn't be active, the value is 0\n      // For those that should be active, but are not the top screen, the value is 1\n      // For those on top of the stack and with interaction enabled, the value is 2\n      // For the old implementation, it stays the same it was\n\n      let isScreenActive = 1;\n      if (shouldUseActivityState || Platform.OS === 'web') {\n        if (index < self.length - activeScreensLimit - 1) {\n          // screen should be inactive because it is too deep in the stack\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          const sceneForActivity = scenes[self.length - 1];\n          const outputValue = index === self.length - 1 ? STATE_ON_TOP // the screen is on top after the transition\n          : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n          : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n      } else {\n        isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n      }\n      const {\n        safeAreaInsets,\n        headerShown = true,\n        headerTransparent,\n        cardShadowEnabled,\n        cardOverlayEnabled,\n        cardOverlay,\n        cardStyle,\n        animationEnabled,\n        gestureResponseDistance,\n        gestureVelocityImpact,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n      } = scene.descriptor ? scene.descriptor.options : {};\n      let transitionConfig = {\n        gestureDirection,\n        transitionSpec,\n        cardStyleInterpolator,\n        headerStyleInterpolator\n      }; // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n\n      if (index !== self.length - 1) {\n        const nextScene = scenes[index + 1];\n        if (nextScene) {\n          const {\n            animationEnabled,\n            gestureDirection = defaultTransitionPreset.gestureDirection,\n            transitionSpec = defaultTransitionPreset.transitionSpec,\n            cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n            headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n          } = nextScene.descriptor ? nextScene.descriptor.options : {};\n          transitionConfig = {\n            gestureDirection,\n            transitionSpec,\n            cardStyleInterpolator,\n            headerStyleInterpolator\n          };\n        }\n      }\n      const {\n        top: safeAreaInsetTop = insets.top,\n        right: safeAreaInsetRight = insets.right,\n        bottom: safeAreaInsetBottom = insets.bottom,\n        left: safeAreaInsetLeft = insets.left\n      } = safeAreaInsets || {};\n      const headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        enabled: isScreensEnabled,\n        active: isScreenActive,\n        pointerEvents: \"box-none\"\n      }, /*#__PURE__*/React.createElement(CardContainer, _extends({\n        index: index,\n        active: index === self.length - 1,\n        focused: focused,\n        closing: closingRouteKeys.includes(route.key),\n        layout: layout,\n        gesture: gesture,\n        scene: scene,\n        safeAreaInsetTop: safeAreaInsetTop,\n        safeAreaInsetRight: safeAreaInsetRight,\n        safeAreaInsetBottom: safeAreaInsetBottom,\n        safeAreaInsetLeft: safeAreaInsetLeft,\n        cardOverlay: cardOverlay,\n        cardOverlayEnabled: cardOverlayEnabled,\n        cardShadowEnabled: cardShadowEnabled,\n        cardStyle: cardStyle,\n        onPageChangeStart: onPageChangeStart,\n        onPageChangeConfirm: onPageChangeConfirm,\n        onPageChangeCancel: onPageChangeCancel,\n        onGestureStart: onGestureStart,\n        onGestureCancel: onGestureCancel,\n        onGestureEnd: onGestureEnd,\n        gestureResponseDistance: gestureResponseDistance,\n        headerHeight: headerHeight,\n        isParentHeaderShown: isParentHeaderShown,\n        onHeaderHeightChange: this.handleHeaderLayout,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        mode: mode,\n        headerMode: headerMode,\n        headerShown: headerShown,\n        hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n        renderHeader: renderHeader,\n        renderScene: renderScene,\n        onOpenRoute: onOpenRoute,\n        onCloseRoute: onCloseRoute,\n        onTransitionStart: onTransitionStart,\n        onTransitionEnd: onTransitionEnd,\n        gestureEnabled: index !== 0 && getGesturesEnabled({\n          route\n        }),\n        gestureVelocityImpact: gestureVelocityImpact\n      }, transitionConfig)));\n    })), isFloatHeaderAbsolute ? floatingHeader : null);\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Animated","StyleSheet","Dimensions","Platform","screensEnabled","MaybeScreenContainer","MaybeScreen","shouldUseActivityState","getDefaultHeaderHeight","CardContainer","DefaultTransition","ModalTransition","forNoAnimation","forNoAnimationHeader","forNoAnimationCard","getDistanceForDirection","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getHeaderHeights","routes","insets","isParentHeaderShown","descriptors","layout","previous","reduce","acc","curr","key","style","flatten","headerStyle","height","safeAreaInsets","headerStatusBarHeight","top","getDistanceFromOptions","mode","descriptor","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","getDerivedStateFromProps","props","state","gestures","animationEnabled","Value","openingRouteKeys","includes","scenes","map","route","index","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","__memo","every","it","i","headerHeights","constructor","_defineProperty","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","get","render","closingRouteKeys","onOpenRoute","onCloseRoute","getGesturesEnabled","renderHeader","renderScene","headerMode","onTransitionStart","onTransitionEnd","onPageChangeStart","onPageChangeConfirm","onPageChangeCancel","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","OS","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerStyleInterpolator","right","bottom","left","activeScreensLimit","length","detachPreviousScreen","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","floatingHeader","Fragment","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styleInterpolator","styles","floating","absolute","isScreensEnabled","enabled","container","onLayout","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","cardShadowEnabled","cardOverlayEnabled","cardOverlay","cardStyle","gestureResponseDistance","gestureVelocityImpact","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","absoluteFill","active","pointerEvents","closing","onHeaderHeightChange","hasAbsoluteHeader","gestureEnabled","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport { screensEnabled } from 'react-native-screens';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={isScreensEnabled}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={isScreensEnabled}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}