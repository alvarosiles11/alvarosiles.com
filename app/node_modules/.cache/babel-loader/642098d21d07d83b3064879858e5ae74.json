{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nexport default /*#__PURE__*/React.memo(function Header(props) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator\n  } = props;\n  const {\n    options\n  } = scene.descriptor;\n  const title = typeof options.headerTitle !== 'function' && options.headerTitle !== undefined ? options.headerTitle : options.title !== undefined ? options.title : scene.route.name;\n  let leftLabel; // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n    leftLabel = typeof o.headerTitle !== 'function' && o.headerTitle !== undefined ? o.headerTitle : o.title !== undefined ? o.title : previous.route.name;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const goBack = React.useCallback(debounce(() => {\n    if (navigation.isFocused() && navigation.canGoBack()) {\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: scene.route.key\n      });\n    }\n  }, 50), [navigation, scene.route.key]);\n  return /*#__PURE__*/React.createElement(HeaderSegment, _extends({}, options, {\n    insets: insets,\n    layout: layout,\n    scene: scene,\n    title: title,\n    leftLabel: leftLabel,\n    headerTitle: typeof options.headerTitle !== 'function' ? props => /*#__PURE__*/React.createElement(HeaderTitle, props) : options.headerTitle,\n    onGoBack: previous ? goBack : undefined,\n    styleInterpolator: styleInterpolator\n  }));\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAGA,4BAAeJ,KAAK,CAACK,IAAN,CAAW,SAASC,MAAT,CAAgBC,KAAhB,EAAyC;EACjE,MAAM;IACJC,KADI;IAEJC,QAFI;IAGJC,MAHI;IAIJC,MAJI;IAKJC,UALI;IAMJC;EANI,IAOFN,KAPJ;EAQA,MAAM;IAAEO;EAAF,IAAcN,KAAK,CAACO,UAA1B;EACA,MAAMC,KAAK,GACT,OAAOF,OAAO,CAACG,WAAf,KAA+B,UAA/B,IACAH,OAAO,CAACG,WAAR,KAAwBC,SADxB,GAEIJ,OAAO,CAACG,WAFZ,GAGIH,OAAO,CAACE,KAAR,KAAkBE,SAAlB,GACAJ,OAAO,CAACE,KADR,GAEAR,KAAK,CAACW,KAAN,CAAYC,IANlB;EAQA,IAAIC,SAAJ,CAlBiE,CAoBjE;EACA;;EACA,IAAIP,OAAO,CAACQ,eAAR,KAA4BJ,SAAhC,EAA2C;IACzCG,SAAS,GAAGP,OAAO,CAACQ,eAApB;EACD,CAFD,MAEO,IAAIb,QAAJ,EAAc;IACnB,MAAMc,CAAC,GAAGd,QAAQ,CAACM,UAAT,CAAoBD,OAA9B;IAEAO,SAAS,GACP,OAAOE,CAAC,CAACN,WAAT,KAAyB,UAAzB,IAAuCM,CAAC,CAACN,WAAF,KAAkBC,SAAzD,GACIK,CAAC,CAACN,WADN,GAEIM,CAAC,CAACP,KAAF,KAAYE,SAAZ,GACAK,CAAC,CAACP,KADF,GAEAP,QAAQ,CAACU,KAAT,CAAeC,IALrB;EAMD,CAjCgE,CAmCjE;;EACA,MAAMI,MAAM,GAAGxB,KAAK,CAACyB,WAAN,CACbrB,QAAQ,CAAC,MAAM;IACb,IAAIQ,UAAU,CAACc,SAAX,MAA0Bd,UAAU,CAACe,SAAX,EAA9B,EAAsD;MACpDf,UAAU,CAACgB,QAAX,CAAoB;QAClB,GAAG3B,YAAY,CAAC4B,GAAb,EADe;QAElBC,MAAM,EAAEtB,KAAK,CAACW,KAAN,CAAYY;MAFF,CAApB;IAID;EACF,CAPO,EAOL,EAPK,CADK,EASb,CAACnB,UAAD,EAAaJ,KAAK,CAACW,KAAN,CAAYY,GAAzB,CATa,CAAf;EAYA,oBACE/B,oBAACE,aAAD,eACMY,OADN;IAEEH,MAAM,EAAEA,MAFV;IAGED,MAAM,EAAEA,MAHV;IAIEF,KAAK,EAAEA,KAJT;IAKEQ,KAAK,EAAEA,KALT;IAMEK,SAAS,EAAEA,SANb;IAOEJ,WAAW,EACT,OAAOH,OAAO,CAACG,WAAf,KAA+B,UAA/B,GACKV,KAAD,iBAAkCP,oBAACG,WAAD,EAAiBI,KAAjB,CADtC,GAEIO,OAAO,CAACG,WAVhB;IAYEe,QAAQ,EAAEvB,QAAQ,GAAGe,MAAH,GAAYN,SAZhC;IAaEL,iBAAiB,EAAEA;EAbrB,GADF;AAiBD,CAjEc,CAAf","names":["React","StackActions","HeaderSegment","HeaderTitle","debounce","memo","Header","props","scene","previous","layout","insets","navigation","styleInterpolator","options","descriptor","title","headerTitle","undefined","route","name","leftLabel","headerBackTitle","o","goBack","useCallback","isFocused","canGoBack","dispatch","pop","source","key","onGoBack"],"sources":["Header.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\n\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nimport type { StackHeaderProps, StackHeaderTitleProps } from '../../types';\n\nexport default React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.name;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.name;\n  }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const goBack = React.useCallback(\n    debounce(() => {\n      if (navigation.isFocused() && navigation.canGoBack()) {\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: scene.route.key,\n        });\n      }\n    }, 50),\n    [navigation, scene.route.key]\n  );\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={previous ? goBack : undefined}\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}