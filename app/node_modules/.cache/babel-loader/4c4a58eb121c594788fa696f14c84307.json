{"ast":null,"code":"import * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache(_ref) {\n  let {\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  } = _ref;\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(() => ({\n    current: {}\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, setOptions, router, emitter]);\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions\n  };\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit,\n        ...rest\n      } = navigation;\n      const dispatch = action => {\n        const payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? {\n          source: route.key,\n          ...payload\n        } : payload);\n      };\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        // @ts-expect-error: name is a valid key, but TypeScript is dumb\n        acc[name] = function () {\n          return dispatch(actions[name](...arguments));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        ...emitter.create(route.key),\n        dispatch,\n        setOptions: options => setOptions(o => ({\n          ...o,\n          [route.key]: {\n            ...o[route.key],\n            ...options\n          }\n        })),\n        isFocused: () => {\n          const state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          } // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      };\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAMO,2BANP;;AA8BA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAT,OAUI;EAAA,IAPjB;IACAC,KADA;IAEAC,QAFA;IAGAC,UAHA;IAIAC,UAJA;IAKAC,MALA;IAMAC;EANA,CAHa;EAWb;EACA;EACA;EACA,MAAMC,KAAK,GAAGT,KAAK,CAACU,OAAN,CACZ,OAAO;IAAEC,OAAO,EAAE;EAAX,CAAP,CADY;EAEZ;EACA,CAACP,QAAD,EAAWC,UAAX,EAAuBC,UAAvB,EAAmCC,MAAnC,EAA2CC,OAA3C,CAHY,CAAd;EAMA,MAAMI,OAAO,GAAG;IACd,GAAGL,MAAM,CAACM,cADI;IAEd,GAAGZ;EAFW,CAAhB;EAKAQ,KAAK,CAACE,OAAN,GAAgBR,KAAK,CAACW,MAAN,CAAaC,MAAb,CACd,CAACC,GAAD,EAAMC,KAAN,KAAgB;IACd,MAAMC,QAAQ,GAAGT,KAAK,CAACE,OAAN,CAAcM,KAAK,CAACE,GAApB,CAAjB;IAEA,IAAID,QAAJ,EAAc;MACZ;MACAF,GAAG,CAACC,KAAK,CAACE,GAAP,CAAH,GAAiBD,QAAjB;IACD,CAHD,MAGO;MACL;MACA,MAAM;QAAEE,IAAF;QAAQ,GAAGC;MAAX,IAAoBhB,UAA1B;MAEA,MAAMiB,QAAQ,GACZC,MADe,IAEZ;QACH,MAAMC,OAAO,GACX,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACnB,QAAQ,EAAT,CAArC,GAAoDmB,MADtD;QAGAlB,UAAU,CAACiB,QAAX,CACE,OAAOE,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA1C,GACI;UAAEC,MAAM,EAAER,KAAK,CAACE,GAAhB;UAAqB,GAAGK;QAAxB,CADJ,GAEIA,OAHN;MAKD,CAXD;MAaA,MAAME,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYhB,OAAZ,EAAqBG,MAArB,CACd,CAACC,GAAD,EAAMa,IAAN,KAAe;QACb;QACAb,GAAG,CAACa,IAAD,CAAH,GAAY;UAAA,OAAkBP,QAAQ,CAACV,OAAO,CAACiB,IAAD,CAAP,CAAc,YAAd,CAAD,CAAtC;QAAA;QACA,OAAOb,GAAP;MACD,CALa,EAMd,EANc,CAAhB;MASAA,GAAG,CAACC,KAAK,CAACE,GAAP,CAAH,GAAiB;QACf,GAAGE,IADY;QAEf,GAAGK,OAFY;QAGf,GAAGlB,OAAO,CAACsB,MAAR,CAAeb,KAAK,CAACE,GAArB,CAHY;QAIfG,QAJe;QAKfhB,UAAU,EAAGyB,OAAD,IACVzB,UAAU,CAAE0B,CAAD,KAAQ;UACjB,GAAGA,CADc;UAEjB,CAACf,KAAK,CAACE,GAAP,GAAa;YAAE,GAAGa,CAAC,CAACf,KAAK,CAACE,GAAP,CAAN;YAAmB,GAAGY;UAAtB;QAFI,CAAR,CAAD,CANG;QAUfE,SAAS,EAAE,MAAM;UACf,MAAM9B,KAAK,GAAGC,QAAQ,EAAtB;UAEA,IAAID,KAAK,CAACW,MAAN,CAAaX,KAAK,CAAC+B,KAAnB,EAA0Bf,GAA1B,KAAkCF,KAAK,CAACE,GAA5C,EAAiD;YAC/C,OAAO,KAAP;UACD,CALc,CAOf;UACA;;UACA,OAAOd,UAAU,GAAGA,UAAU,CAAC4B,SAAX,EAAH,GAA4B,IAA7C;QACD;MApBc,CAAjB;IAsBD;IAED,OAAOjB,GAAP;EACD,CA1Da,EA2Dd,EA3Dc,CAAhB;EA8DA,OAAOP,KAAK,CAACE,OAAb;AACD","names":["React","CommonActions","useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","action","payload","source","helpers","Object","keys","name","create","options","o","isFocused","index"],"sources":["useNavigationCache.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}