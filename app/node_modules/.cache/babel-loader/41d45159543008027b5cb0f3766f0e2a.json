{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n};\nconst isDrawerOpen = state => {\n  var _state$history;\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n};\nconst openDrawer = state => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n  return {\n    ...state,\n    history: [...state.history, {\n      type: 'drawer'\n    }]\n  };\n};\nconst closeDrawer = state => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n  return {\n    ...state,\n    history: state.history.filter(it => it.type !== 'drawer')\n  };\n};\nexport default function DrawerRouter(_ref) {\n  let {\n    openByDefault,\n    ...rest\n  } = _ref;\n  const router = TabRouter(rest);\n  return {\n    ...router,\n    type: 'drawer',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref2;\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref3;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n      return {\n        ...state,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n      return closeDrawer(result);\n    },\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n          return openDrawer(state);\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","_state$history","some","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"sources":["DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (partialState.history ? isDrawerOpen(partialState) : openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}