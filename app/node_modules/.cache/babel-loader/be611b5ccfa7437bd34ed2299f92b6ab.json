{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { Animated, View, Image } from 'react-native';\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport { isSearchBarAvailableForCurrentPlatform, executeNativeBackPress } from './utils';\nlet ENABLE_SCREENS = true;\nexport function enableScreens() {\n  let shouldEnableScreens = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n} // @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nexport function enableFreeze() {\n  let shouldEnableReactFreeze = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n} // noop\n\nexport class NativeScreen extends React.Component {\n  render() {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n\n      return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n      , _extends({\n        hidden: activityState === 0,\n        style: [style, {\n          display: activityState !== 0 ? 'flex' : 'none'\n        }]\n      }, rest));\n    }\n    return /*#__PURE__*/React.createElement(View, rest);\n  }\n}\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\nexport const InnerScreen = View;\nexport const ScreenContext = /*#__PURE__*/React.createContext(Screen);\nexport const ScreenContainer = View;\nexport const NativeScreenContainer = View;\nexport const NativeScreenNavigationContainer = View;\nexport const ScreenStack = View;\nexport const FullWindowOverlay = View;\nexport const ScreenStackHeaderBackButtonImage = props => /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Image, _extends({\n  resizeMode: \"center\",\n  fadeDuration: 0\n}, props)));\nexport const ScreenStackHeaderRightView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderLeftView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderCenterView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderSearchBarView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderConfig = View; // @ts-expect-error: search bar props have no common props with View\n\nexport const SearchBar = View;\nexport const ScreenStackHeaderSubview = View;\nexport const shouldUseActivityState = true;","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAgDC,KAAhD,QAA6D,cAA7D;AAUA,cAAc,SAAd;AACA,SAASC,OAAO,IAAIC,qBAApB,QAAiD,yBAAjD;AACA,SACEC,sCADF,EAEEC,sBAFF,QAGO,SAHP;AAKA,IAAIC,cAAc,GAAG,IAArB;AAEA,OAAO,SAASC,aAAT,GAAyD;EAAA,IAAlCC,mBAAmB,uEAAG,IAA7C;EACLF,cAAc,GAAGE,mBAAjB;AACD;AAED,OAAO,SAASC,cAAT,GAAmC;EACxC,OAAOH,cAAP;AACD,C,CAED;AACA;;AACA,OAAO,SAASI,YAAT,GAA4D;EAAA,IAAtCC,uBAAuB,uEAAG,IAAhD;AAEN,EADC;;AAGF,OAAO,MAAMC,YAAN,SAA2Bd,KAAK,CAACe,SAAjC,CAAwD;EAC7DC,MAAM,GAAgB;IACpB,IAAI;MACFC,MADE;MAEFC,aAFE;MAGFC,KAHE;MAIFC,OAAO,GAAGZ,cAJR;MAKF,GAAGa;IALD,IAMA,KAAKC,KANT;IAQA,IAAIF,OAAJ,EAAa;MACX,IAAIH,MAAM,KAAKM,SAAX,IAAwBL,aAAa,KAAKK,SAA9C,EAAyD;QACvDL,aAAa,GAAGD,MAAM,KAAK,CAAX,GAAe,CAAf,GAAmB,CAAnC,CADuD,CACjB;MACvC;;MACD,oBACEjB,oBAACE,IAAD,CACE;MAAA,EADFsB;QAEEC,MAAM,EAAEP,aAAa,KAAK,CAF5B;QAGEC,KAAK,EAAE,CAACA,KAAD,EAAQ;UAAEO,OAAO,EAAER,aAAa,KAAK,CAAlB,GAAsB,MAAtB,GAA+B;QAA1C,CAAR;MAHT,GAIMG,IAJN,EADF;IAQD;IAED,oBAAOrB,oBAACE,IAAD,EAAUmB,IAAV,CAAP;EACD;AAzB4D;AA4B/D,OAAO,MAAMM,MAAM,GAAG1B,QAAQ,CAAC2B,uBAAT,CAAiCd,YAAjC,CAAf;AAEP,OAAO,MAAMe,WAAW,GAAG3B,IAApB;AAEP,OAAO,MAAM4B,aAAa,gBAAG9B,KAAK,CAAC+B,aAAN,CAAoBJ,MAApB,CAAtB;AAEP,OAAO,MAAMK,eAA0D,GAAG9B,IAAnE;AAEP,OAAO,MAAM+B,qBAAgE,GAAG/B,IAAzE;AAEP,OAAO,MAAMgC,+BAA0E,GAAGhC,IAAnF;AAEP,OAAO,MAAMiC,WAAkD,GAAGjC,IAA3D;AAEP,OAAO,MAAMkC,iBAAiB,GAAGlC,IAA1B;AAEP,OAAO,MAAMmC,gCAAgC,GAC3Cf,KAD8C,iBAG9CtB,oBAACE,IAAD,qBACEF,oBAACG,KAAD;EAAOmC,UAAU,EAAC,QAAlB;EAA2BC,YAAY,EAAE;AAAzC,GAAgDjB,KAAhD,EADF,CAHK;AAQP,OAAO,MAAMkB,0BAA0B,GACrClB,KADwC,iBAExBtB,oBAACE,IAAD,EAAUoB,KAAV,CAFX;AAIP,OAAO,MAAMmB,yBAAyB,GACpCnB,KADuC,iBAEvBtB,oBAACE,IAAD,EAAUoB,KAAV,CAFX;AAIP,OAAO,MAAMoB,2BAA2B,GACtCpB,KADyC,iBAEzBtB,oBAACE,IAAD,EAAUoB,KAAV,CAFX;AAIP,OAAO,MAAMqB,8BAA8B,GACzCrB,KAD4C,iBAE5BtB,oBAACE,IAAD,EAAUoB,KAAV,CAFX;AAIP,OAAO,MAAMsB,uBAA0E,GAAG1C,IAAnF,C,CAEP;;AACA,OAAO,MAAM2C,SAA8C,GAAG3C,IAAvD;AAEP,OAAO,MAAM4C,wBAEX,GAAG5C,IAFE;AAIP,OAAO,MAAM6C,sBAAsB,GAAG,IAA/B","names":["React","Animated","View","Image","default","useTransitionProgress","isSearchBarAvailableForCurrentPlatform","executeNativeBackPress","ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","Component","render","active","activityState","style","enabled","rest","props","undefined","_extends","hidden","display","Screen","createAnimatedComponent","InnerScreen","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"sources":["index.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const InnerScreen = View;\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}