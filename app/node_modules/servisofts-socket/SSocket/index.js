var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React, { Component } from 'react';
import { SText, SView, STheme, SThread, SIcon } from 'servisofts-component';
import { getDefaultConfig } from '../index';
import SSession from './SSession/index';
import { connect } from 'react-redux';
var SSocket = /** @class */ (function (_super) {
    __extends(SSocket, _super);
    function SSocket(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            log: []
        };
        _this.initApi();
        return _this;
        // var data = require("../../../index.js");
        // alert(JSON.stringify(data));
    }
    SSocket.register = function (observado, callback) {
        SSocket.Observados[observado] = callback;
    };
    SSocket.getSession = function () {
        if (!SSocket.defaultConfig)
            return null;
        if (!SSocket.Instance) {
            SSocket.Instance = new SSession(SSocket.defaultConfig);
        }
        return SSocket.Instance;
    };
    SSocket.send = function (data) {
        var _this = this;
        //TODO: send data to server
        if (!SSocket.getSession()) {
            // alert(data.component)
            return;
        }
        if (!SSocket.getSession().isOpen()) {
            new SThread(100, "", true).start(function () {
                _this.send(data);
            });
            return;
        }
        return SSocket.getSession().send(data);
    };
    SSocket.prototype.componentDidMount = function () {
        this.initApi();
        SSocket.getSession().init(this);
    };
    SSocket.prototype.initApi = function () {
        if (!SSocket.defaultConfig)
            SSocket.defaultConfig = getDefaultConfig();
        if (SSocket.defaultConfig.ssl) {
            SSocket.api.root = "https://" + SSocket.defaultConfig.host + "/images/";
            SSocket.api.img = "https://" + SSocket.defaultConfig.host + "/img/";
            SSocket.api.manejador = "https://" + SSocket.defaultConfig.host + "/manejador/";
        }
        else {
            SSocket.api.root = "http://" + SSocket.defaultConfig.host + ":" + SSocket.defaultConfig.port.http + "/";
            SSocket.api.img = "http://" + SSocket.defaultConfig.host + ":" + SSocket.defaultConfig.port.http + "/img/";
            SSocket.api.manejador = "http://" + SSocket.defaultConfig.host + ":" + SSocket.defaultConfig.port.http + "/manejador/";
        }
        Object.keys(SSocket.defaultConfig.apis).map(function (key) {
            SSocket.api[key] = SSocket.defaultConfig.apis[key];
        });
    };
    // getLogs() {
    //     return this.state.log.map((item, index) => {
    //         return <SText fontSize={12} >{"\n"}{item}</SText>
    //     })
    // }
    SSocket.prototype.notifyObserver = function () {
        var _this = this;
        Object.keys(SSocket.Observados).forEach(function (key) {
            SSocket.Observados[key](_this);
        });
    };
    SSocket.prototype.render = function () {
        this.notifyObserver();
        // return <></>
        if (SSocket.getSession().isOpen()) {
            return null;
        }
        return React.createElement(React.Fragment, null);
        return (React.createElement(SView, { style: {
                width: 200,
                height: 200,
                position: "absolute",
                backgroundColor: STheme.color.background + "aa",
                overflow: "hidden"
            }, center: true },
            React.createElement(SView, { col: "xs-3 md-2 xl-1" },
                React.createElement(SIcon, { name: "Wifi", fill: STheme.color.secondary })),
            React.createElement(SText, null, "Conexion perdida")));
    };
    SSocket.defaultConfig = getDefaultConfig();
    SSocket.Observados = {};
    SSocket.api = {
        root: "",
        manejador: "",
        img: "",
        rp: ""
    };
    SSocket.Instance = null;
    return SSocket;
}(Component));
var initStates = function (state) {
    return { state: state };
};
export default connect(initStates)(SSocket);
